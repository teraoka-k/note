{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { isReadMode, setWriteMode } from '../states/appMode';\nexport var useShortcutKeys = function useShortcutKeys() {\n  _s();\n\n  useEffect(function () {\n    shortcutKeys.forEach(function (shortcut) {\n      window.addEventListener(shortcut.event, function (e) {\n        if (e.key == shortcut.key && (shortcut.alt && e.altKey || !shortcut.alt) && (shortcut.ctrl && e.ctrlKey || !shortcut.ctrl) && (shortcut.meta && e.metaKey || !shortcut.meta) && (shortcut.shift && e.shiftKey || !shortcut.shift)) shortcut.action();\n      });\n    });\n  }, []);\n};\n\n_s(useShortcutKeys, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nvar shortcutKeys = [{\n  event: 'keydown',\n  key: 'a',\n  action: function action() {\n    if (isReadMode()) setWriteMode();\n  }\n}];","map":{"version":3,"sources":["/home/teraoka/app/note/logic/shortcutKeys.ts"],"names":["useEffect","isReadMode","setWriteMode","useShortcutKeys","shortcutKeys","forEach","shortcut","window","addEventListener","event","e","key","alt","altKey","ctrl","ctrlKey","meta","metaKey","shift","shiftKey","action"],"mappings":";;AAAA,SAASA,SAAT,QAA+B,OAA/B;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,mBAAzC;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAY;AAAA;;AACzCH,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAACC,QAAD,EAAc;AACjCC,MAAAA,MAAM,CAACC,gBAAP,CAAwBF,QAAQ,CAACG,KAAjC,EAAwC,UAACC,CAAD,EAAsB;AAC5D,YACEA,CAAC,CAACC,GAAF,IAASL,QAAQ,CAACK,GAAlB,KACEL,QAAQ,CAACM,GAAT,IAAgBF,CAAC,CAACG,MAAnB,IAA8B,CAACP,QAAQ,CAACM,GADzC,MAEEN,QAAQ,CAACQ,IAAT,IAAiBJ,CAAC,CAACK,OAApB,IAAgC,CAACT,QAAQ,CAACQ,IAF3C,MAGER,QAAQ,CAACU,IAAT,IAAiBN,CAAC,CAACO,OAApB,IAAgC,CAACX,QAAQ,CAACU,IAH3C,MAIEV,QAAQ,CAACY,KAAT,IAAkBR,CAAC,CAACS,QAArB,IAAkC,CAACb,QAAQ,CAACY,KAJ7C,CADF,EAOEZ,QAAQ,CAACc,MAAT;AACH,OATD;AAUD,KAXD;AAYD,GAbQ,EAaN,EAbM,CAAT;AAcD,CAfM;;GAAMjB,e;;AAiBb,IAAMC,YAA2B,GAAG,CAClC;AACEK,EAAAA,KAAK,EAAE,SADT;AAEEE,EAAAA,GAAG,EAAE,GAFP;AAGES,EAAAA,MAAM,EAAE,kBAAM;AACZ,QAAInB,UAAU,EAAd,EAAkBC,YAAY;AAC/B;AALH,CADkC,CAApC","sourcesContent":["import { useEffect, Key } from 'react'\nimport { isReadMode, setWriteMode } from '../states/appMode'\n\nexport const useShortcutKeys = (): void => {\n  useEffect(() => {\n    shortcutKeys.forEach((shortcut) => {\n      window.addEventListener(shortcut.event, (e: KeyboardEvent) => {\n        if (\n          e.key == shortcut.key &&\n          ((shortcut.alt && e.altKey) || !shortcut.alt) &&\n          ((shortcut.ctrl && e.ctrlKey) || !shortcut.ctrl) &&\n          ((shortcut.meta && e.metaKey) || !shortcut.meta) &&\n          ((shortcut.shift && e.shiftKey) || !shortcut.shift)\n        )\n          shortcut.action()\n      })\n    })\n  }, [])\n}\n\nconst shortcutKeys: ShortcutKey[] = [\n  {\n    event: 'keydown',\n    key: 'a',\n    action: () => {\n      if (isReadMode()) setWriteMode()\n    },\n  },\n]\n\ninterface ShortcutKey {\n  event: keyof WindowEventMap\n  key: Key\n  action: () => void\n  alt?: boolean\n  ctrl?: boolean\n  meta?: boolean\n  shift?: boolean\n}\n"]},"metadata":{},"sourceType":"module"}