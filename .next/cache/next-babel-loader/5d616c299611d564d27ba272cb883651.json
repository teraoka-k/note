{"ast":null,"code":"import { useState } from 'react';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"write\"] = 0] = \"write\";\n  AppMode[AppMode[\"read\"] = 1] = \"read\";\n  AppMode[AppMode[\"rewrite\"] = 2] = \"rewrite\";\n})(AppMode || (AppMode = {}));\n\nlet mode;\nlet setMode;\nexport function useAppMode() {\n  ;\n  [mode, setMode] = useState(AppMode.read);\n}\nexport function isHomeMode() {\n  return mode == AppMode.home;\n}\nexport function isWriteMode() {\n  return mode == AppMode.write;\n}\nexport function isReadMode() {\n  return mode == AppMode.read;\n}\nexport function isRewriteMode() {\n  return mode == AppMode.rewrite;\n}\nexport function setHomeMode() {\n  cahngeMode(AppMode.home);\n}\nexport function setWriteMode() {\n  cahngeMode(AppMode.write);\n}\nexport function setReadMode() {\n  cahngeMode(AppMode.read);\n}\nexport function setRewriteMode() {\n  cahngeMode(AppMode.rewrite);\n}\n/**\n * @private\n */\n\nfunction cahngeMode(newMode) {\n  histories.push(mode);\n  setMode(newMode);\n}\n\nexport function backMode() {\n  setMode(histories.pop());\n}\nlet histories = [];","map":{"version":3,"sources":["/home/teraoka/app/note/states/appMode.ts"],"names":["useState","AppMode","mode","setMode","useAppMode","read","isHomeMode","home","isWriteMode","write","isReadMode","isRewriteMode","rewrite","setHomeMode","cahngeMode","setWriteMode","setReadMode","setRewriteMode","newMode","histories","push","backMode","pop"],"mappings":"AAAA,SAASA,QAAT,QAAmD,OAAnD;IAGKC,O;;WAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAML,IAAIC,IAAJ;AACA,IAAIC,OAAJ;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B;AAAC,GAACF,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAACC,OAAO,CAACI,IAAT,CAA1B;AACF;AAED,OAAO,SAASC,UAAT,GAA+B;AACpC,SAAOJ,IAAI,IAAID,OAAO,CAACM,IAAvB;AACD;AACD,OAAO,SAASC,WAAT,GAAgC;AACrC,SAAON,IAAI,IAAID,OAAO,CAACQ,KAAvB;AACD;AACD,OAAO,SAASC,UAAT,GAA+B;AACpC,SAAOR,IAAI,IAAID,OAAO,CAACI,IAAvB;AACD;AACD,OAAO,SAASM,aAAT,GAAkC;AACvC,SAAOT,IAAI,IAAID,OAAO,CAACW,OAAvB;AACD;AACD,OAAO,SAASC,WAAT,GAA6B;AAClCC,EAAAA,UAAU,CAACb,OAAO,CAACM,IAAT,CAAV;AACD;AACD,OAAO,SAASQ,YAAT,GAA8B;AACnCD,EAAAA,UAAU,CAACb,OAAO,CAACQ,KAAT,CAAV;AACD;AACD,OAAO,SAASO,WAAT,GAA6B;AAClCF,EAAAA,UAAU,CAACb,OAAO,CAACI,IAAT,CAAV;AACD;AACD,OAAO,SAASY,cAAT,GAAgC;AACrCH,EAAAA,UAAU,CAACb,OAAO,CAACW,OAAT,CAAV;AACD;AAED;;;;AAGA,SAASE,UAAT,CAAoBI,OAApB,EAA4C;AAC1CC,EAAAA,SAAS,CAACC,IAAV,CAAelB,IAAf;AACAC,EAAAA,OAAO,CAACe,OAAD,CAAP;AACD;;AAED,OAAO,SAASG,QAAT,GAA0B;AAC/BlB,EAAAA,OAAO,CAACgB,SAAS,CAACG,GAAV,EAAD,CAAP;AACD;AAED,IAAIH,SAAoB,GAAG,EAA3B","sourcesContent":["import { useState, Dispatch, SetStateAction } from 'react'\nimport { read } from 'fs'\n\nenum AppMode {\n  write,\n  read,\n  rewrite,\n}\n\nlet mode: AppMode\nlet setMode: Dispatch<SetStateAction<AppMode>>\n\nexport function useAppMode() {\n  ;[mode, setMode] = useState(AppMode.read)\n}\n\nexport function isHomeMode(): boolean {\n  return mode == AppMode.home\n}\nexport function isWriteMode(): boolean {\n  return mode == AppMode.write\n}\nexport function isReadMode(): boolean {\n  return mode == AppMode.read\n}\nexport function isRewriteMode(): boolean {\n  return mode == AppMode.rewrite\n}\nexport function setHomeMode(): void {\n  cahngeMode(AppMode.home)\n}\nexport function setWriteMode(): void {\n  cahngeMode(AppMode.write)\n}\nexport function setReadMode(): void {\n  cahngeMode(AppMode.read)\n}\nexport function setRewriteMode(): void {\n  cahngeMode(AppMode.rewrite)\n}\n\n/**\n * @private\n */\nfunction cahngeMode(newMode: AppMode): void {\n  histories.push(mode)\n  setMode(newMode)\n}\n\nexport function backMode(): void {\n  setMode(histories.pop())\n}\n\nlet histories: AppMode[] = []\n"]},"metadata":{},"sourceType":"module"}