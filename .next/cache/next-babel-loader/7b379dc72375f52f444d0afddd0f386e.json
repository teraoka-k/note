{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/teraoka/app/note/components/writer.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { cacheData, getCache } from '../cache/cache';\nimport { center } from '../styles/styles';\nimport { playEnterSound } from '../util/sounds';\nimport { setHomeMode } from '../states/appMode';\nimport { windowHeight, windowWidth } from '../states/windowSize';\nimport { BackButton } from './backButton';\nvar Mode;\n\n(function (Mode) {\n  Mode[Mode[\"IN\"] = 0] = \"IN\";\n  Mode[Mode[\"OUT\"] = 1] = \"OUT\";\n})(Mode || (Mode = {}));\n\nexport var Writer = function Writer() {\n  _s();\n\n  // states\n  var _useState = useState(getCache('writing') || '# Markdown Editor\\n\\nwrite a note here'),\n      src = _useState[0],\n      setSrc = _useState[1];\n\n  var _useState2 = useState(Mode.IN),\n      mode = _useState2[0],\n      setMode = _useState2[1]; // reference to child components\n\n\n  var inputElement = useRef(null);\n  var outputElement = useRef(null);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(\"textarea\", {\n    style: {\n      height: \"\".concat(windowHeight, \"px\"),\n      width: \"\".concat(windowWidth, \"px\")\n    },\n    onChange: function onChange(e) {\n      setSrc(e.target.value);\n      cacheData('writing', src);\n    },\n    onMouseEnter: function onMouseEnter() {\n      return setMode(Mode.IN);\n    },\n    onTouchStart: function onTouchStart() {\n      return setMode(Mode.IN);\n    },\n    onScroll: function onScroll(e) {\n      if (mode == Mode.IN) {\n        outputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (outputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: inputElement,\n    value: src,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: center,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      playEnterSound();\n      fetch('/api/note', {\n        method: 'post',\n        body: JSON.stringify({\n          text: src\n        })\n      });\n      setHomeMode();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Save\"), __jsx(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    style: {\n      height: \"\".concat(windowHeight, \"px\"),\n      width: \"\".concat(windowWidth, \"px\"),\n      overflow: 'auto'\n    },\n    onMouseEnter: function onMouseEnter() {\n      return setMode(Mode.OUT);\n    },\n    onTouchStart: function onTouchStart() {\n      return setMode(Mode.OUT);\n    },\n    onScroll: function onScroll(e) {\n      if (mode == Mode.OUT) {\n        inputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (inputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: outputElement,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(ReactMarkdown, {\n    source: src,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(Writer, \"U+GtwRg3PfFHOZCtuEgsybPnKJ8=\");\n\n_c = Writer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Writer\");","map":{"version":3,"sources":["/home/teraoka/app/note/components/writer.tsx"],"names":["useState","useRef","ReactMarkdown","cacheData","getCache","center","playEnterSound","setHomeMode","windowHeight","windowWidth","BackButton","Mode","Writer","src","setSrc","IN","mode","setMode","inputElement","outputElement","height","width","e","target","value","current","scrollTop","currentTarget","scrollHeight","fetch","method","body","JSON","stringify","text","overflow","OUT"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { cacheData, getCache } from '../cache/cache'\nimport { center } from '../styles/styles'\nimport { playEnterSound } from '../util/sounds'\nimport { setHomeMode, backMode } from '../states/appMode'\nimport { windowHeight, windowWidth } from '../states/windowSize'\nimport { BackButton } from './backButton'\n\nenum Mode {\n  IN,\n  OUT,\n}\n\nexport const Writer = () => {\n  // states\n  const [src, setSrc] = useState(\n    getCache('writing') || '# Markdown Editor\\n\\nwrite a note here'\n  )\n  const [mode, setMode] = useState(Mode.IN)\n\n  // reference to child components\n  const inputElement = useRef(null)\n  const outputElement = useRef(null)\n\n  return (\n    <div>\n      <textarea\n        style={{ height: `${windowHeight}px`, width: `${windowWidth}px` }}\n        onChange={(e) => {\n          setSrc(e.target.value)\n          cacheData('writing', src)\n        }}\n        onMouseEnter={() => setMode(Mode.IN)}\n        onTouchStart={() => setMode(Mode.IN)}\n        onScroll={(e) => {\n          if (mode == Mode.IN) {\n            outputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (outputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={inputElement}\n        value={src}\n      ></textarea>\n      <div style={center}>\n        <button\n          onClick={() => {\n            playEnterSound()\n            fetch('/api/note', {\n              method: 'post',\n              body: JSON.stringify({ text: src }),\n            })\n            setHomeMode()\n          }}\n        >\n          Save\n        </button>\n        <BackButton></BackButton>\n      </div>\n      <div\n        style={{\n          height: `${windowHeight}px`,\n          width: `${windowWidth}px`,\n          overflow: 'auto',\n        }}\n        onMouseEnter={() => setMode(Mode.OUT)}\n        onTouchStart={() => setMode(Mode.OUT)}\n        onScroll={(e) => {\n          if (mode == Mode.OUT) {\n            inputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (inputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={outputElement}\n      >\n        <ReactMarkdown source={src}></ReactMarkdown>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}