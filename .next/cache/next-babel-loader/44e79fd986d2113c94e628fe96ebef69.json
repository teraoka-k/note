{"ast":null,"code":"import { MongoClient } from 'mongodb';\nconst URL = 'mongodb://localhost:27017';\nconst NAME = 'mongodb';\nexport async function insertDocument(collectionName, document) {\n  let client;\n\n  try {\n    client = await MongoClient.connect(URL, {\n      useNewUrlParser: true\n    });\n    await client.db(NAME).collection(collectionName).insertOne(document);\n  } finally {\n    client.close();\n  }\n}\nexport async function findDocuments(collectionName, filter) {\n  return await test(collectionName, async collection => await collection.find(filter).toArray());\n}\nexport async function deleteDocument(collectionName, filter) {\n  await test(collectionName, async collection => await collection.deleteOne(filter));\n}\nexport async function updateDocument(collectionName, filter, newDocument) {\n  await test(collectionName, async collection => await collection.updateOne(filter, {\n    $set: newDocument\n  }));\n}\n/**\n * @private\n */\n\nasync function test(collectionName, method) {\n  let client;\n\n  try {\n    client = await MongoClient.connect(URL, {\n      useNewUrlParser: true\n    });\n    const collection = client.db(NAME).collection(collectionName);\n    return await method(collection);\n  } finally {\n    client.close();\n  }\n}","map":{"version":3,"sources":["/home/teraoka/app/note/logic/mongoAPI.ts"],"names":["MongoClient","URL","NAME","insertDocument","collectionName","document","client","connect","useNewUrlParser","db","collection","insertOne","close","findDocuments","filter","test","find","toArray","deleteDocument","deleteOne","updateDocument","newDocument","updateOne","$set","method"],"mappings":"AAAA,SAASA,WAAT,QAAwC,SAAxC;AAEA,MAAMC,GAAG,GAAG,2BAAZ;AACA,MAAMC,IAAI,GAAG,SAAb;AAEA,OAAO,eAAeC,cAAf,CACLC,cADK,EAELC,QAFK,EAGU;AACf,MAAIC,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoBN,GAApB,EAAyB;AAAEO,MAAAA,eAAe,EAAE;AAAnB,KAAzB,CAAf;AACA,UAAMF,MAAM,CAACG,EAAP,CAAUP,IAAV,EAAgBQ,UAAhB,CAA2BN,cAA3B,EAA2CO,SAA3C,CAAqDN,QAArD,CAAN;AACD,GAHD,SAGU;AACRC,IAAAA,MAAM,CAACM,KAAP;AACD;AACF;AAED,OAAO,eAAeC,aAAf,CACLT,cADK,EAELU,MAFK,EAGW;AAChB,SAAO,MAAMC,IAAI,CACfX,cADe,EAEf,MAAOM,UAAP,IAAsB,MAAMA,UAAU,CAACM,IAAX,CAAgBF,MAAhB,EAAwBG,OAAxB,EAFb,CAAjB;AAID;AAED,OAAO,eAAeC,cAAf,CAA8Bd,cAA9B,EAAsDU,MAAtD,EAAsE;AAC3E,QAAMC,IAAI,CACRX,cADQ,EAER,MAAOM,UAAP,IAAsB,MAAMA,UAAU,CAACS,SAAX,CAAqBL,MAArB,CAFpB,CAAV;AAID;AAED,OAAO,eAAeM,cAAf,CACLhB,cADK,EAELU,MAFK,EAGLO,WAHK,EAIL;AACA,QAAMN,IAAI,CACRX,cADQ,EAER,MAAOM,UAAP,IACE,MAAMA,UAAU,CAACY,SAAX,CAAqBR,MAArB,EAA6B;AAAES,IAAAA,IAAI,EAAEF;AAAR,GAA7B,CAHA,CAAV;AAKD;AAED;;;;AAGA,eAAeN,IAAf,CACEX,cADF,EAEEoB,MAFF,EAGE;AACA,MAAIlB,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoBN,GAApB,EAAyB;AAAEO,MAAAA,eAAe,EAAE;AAAnB,KAAzB,CAAf;AACA,UAAME,UAAU,GAAGJ,MAAM,CAACG,EAAP,CAAUP,IAAV,EAAgBQ,UAAhB,CAA2BN,cAA3B,CAAnB;AACA,WAAO,MAAMoB,MAAM,CAACd,UAAD,CAAnB;AACD,GAJD,SAIU;AACRJ,IAAAA,MAAM,CAACM,KAAP;AACD;AACF","sourcesContent":["import { MongoClient, Collection } from 'mongodb'\n\nconst URL = 'mongodb://localhost:27017'\nconst NAME = 'mongodb'\n\nexport async function insertDocument(\n  collectionName: string,\n  document: object\n): Promise<void> {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    await client.db(NAME).collection(collectionName).insertOne(document)\n  } finally {\n    client.close()\n  }\n}\n\nexport async function findDocuments(\n  collectionName: string,\n  filter: object\n): Promise<any[]> {\n  return await test(\n    collectionName,\n    async (collection) => await collection.find(filter).toArray()\n  )\n}\n\nexport async function deleteDocument(collectionName: string, filter: object) {\n  await test(\n    collectionName,\n    async (collection) => await collection.deleteOne(filter)\n  )\n}\n\nexport async function updateDocument(\n  collectionName: string,\n  filter: object,\n  newDocument: object\n) {\n  await test(\n    collectionName,\n    async (collection) =>\n      await collection.updateOne(filter, { $set: newDocument })\n  )\n}\n\n/**\n * @private\n */\nasync function test(\n  collectionName: string,\n  method: (collection: Collection<any>) => Promise<any>\n) {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    const collection = client.db(NAME).collection(collectionName)\n    return await method(collection)\n  } finally {\n    client.close()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}