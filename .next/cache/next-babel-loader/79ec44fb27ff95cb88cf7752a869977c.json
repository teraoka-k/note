{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { executeAsync } from '../logic/async';\nexport var notes;\nexport var setNotes;\nexport function useNotes() {\n  _s();\n\n  ;\n\n  var _useState = useState([]);\n\n  var _useState2 = _slicedToArray(_useState, 2);\n\n  notes = _useState2[0];\n  setNotes = _useState2[1];\n  useEffect(loadNotes, []);\n}\n\n_s(useNotes, \"0R7l53CiwQu7ziyMeHtgYF+Ya+E=\");\n\nfunction findNotes() {\n  return _findNotes.apply(this, arguments);\n}\n\nfunction _findNotes() {\n  _findNotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('api/note');\n\n          case 2:\n            _context2.next = 4;\n            return _context2.sent.json();\n\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _findNotes.apply(this, arguments);\n}\n\nfunction loadNotes() {\n  executeAsync( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setNotes;\n            _context.next = 3;\n            return findNotes();\n\n          case 3:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n}\n\nexport function deleteNote(note) {\n  fetch(\"api/note\", {\n    method: 'DELETE',\n    body: JSON.stringify(note._id)\n  });\n  loadNotes();\n}\nexport function addNote(src) {\n  fetch('/api/note', {\n    method: 'post',\n    body: JSON.stringify({\n      text: src\n    })\n  });\n}","map":{"version":3,"sources":["/home/teraoka/app/note/states/notes.ts"],"names":["useState","useEffect","executeAsync","notes","setNotes","useNotes","loadNotes","findNotes","fetch","json","deleteNote","note","method","body","JSON","stringify","_id","addNote","src","text"],"mappings":";;;;;;AAAA,SAAmBA,QAAnB,EAA6BC,SAA7B,QAA8D,OAA9D;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,IAAIC,KAAJ;AACP,OAAO,IAAIC,QAAJ;AAEP,OAAO,SAASC,QAAT,GAAoB;AAAA;;AACzB;;AADyB,kBACJL,QAAQ,CAAC,EAAD,CADJ;;AAAA;;AACvBG,EAAAA,KADuB;AAChBC,EAAAA,QADgB;AAEzBH,EAAAA,SAAS,CAACK,SAAD,EAAY,EAAZ,CAAT;AACD;;GAHeD,Q;;SAKDE,S;;;;;wEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACsBC,KAAK,CAAC,UAAD,CAD3B;;AAAA;AAAA;AAAA,kCACyCC,IADzC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIA,SAASH,SAAT,GAA2B;AACzBJ,EAAAA,YAAY,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAYE,QAAZ;AAAA;AAAA,mBAA2BG,SAAS,EAApC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAZ;AACD;;AAED,OAAO,SAASG,UAAT,CAAoBC,IAApB,EAAsC;AAC3CH,EAAAA,KAAK,aAAa;AAChBI,IAAAA,MAAM,EAAE,QADQ;AAEhBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAI,CAACK,GAApB;AAFU,GAAb,CAAL;AAIAV,EAAAA,SAAS;AACV;AAED,OAAO,SAASW,OAAT,CAAiBC,GAAjB,EAAoC;AACzCV,EAAAA,KAAK,CAAC,WAAD,EAAc;AACjBI,IAAAA,MAAM,EAAE,MADS;AAEjBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEI,MAAAA,IAAI,EAAED;AAAR,KAAf;AAFW,GAAd,CAAL;AAID","sourcesContent":["import { Dispatch, useState, useEffect, SetStateAction } from 'react'\nimport { Note } from '../logic/colllections/note'\nimport { executeAsync } from '../logic/async'\n\nexport let notes: Note[]\nexport let setNotes: Dispatch<SetStateAction<Note[]>>\n\nexport function useNotes() {\n  ;[notes, setNotes] = useState([])\n  useEffect(loadNotes, [])\n}\n\nasync function findNotes(): Promise<Note[]> {\n  return await (await fetch('api/note')).json()\n}\n\nfunction loadNotes(): void {\n  executeAsync(async () => setNotes(await findNotes()))\n}\n\nexport function deleteNote(note: Note): void {\n  fetch(`api/note`, {\n    method: 'DELETE',\n    body: JSON.stringify(note._id),\n  })\n  loadNotes()\n}\n\nexport function addNote(src: string): void {\n  fetch('/api/note', {\n    method: 'post',\n    body: JSON.stringify({ text: src }),\n  })\n}\n"]},"metadata":{},"sourceType":"module"}