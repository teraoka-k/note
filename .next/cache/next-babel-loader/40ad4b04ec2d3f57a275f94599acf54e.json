{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/teraoka/app/note/components/writer.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { cacheData, getCache } from '../cache/cache';\nimport { center, splitVertical, splitHorizontal } from '../styles/styles';\nimport { windowHeight } from '../states/windowSize';\nimport { BackButton } from './backButton';\nimport { SaveButton } from './saveButton';\nvar Mode;\n\n(function (Mode) {\n  Mode[Mode[\"IN\"] = 0] = \"IN\";\n  Mode[Mode[\"OUT\"] = 1] = \"OUT\";\n})(Mode || (Mode = {}));\n\nexport var Writer = function Writer() {\n  _s();\n\n  var _jsx;\n\n  // states\n  var _useState = useState(getCache('writing') || '# Markdown Editor\\n\\nwrite a note here'),\n      src = _useState[0],\n      setSrc = _useState[1];\n\n  var _useState2 = useState(Mode.IN),\n      mode = _useState2[0],\n      setMode = _useState2[1]; // reference to child components\n\n\n  var inputElement = useRef(null);\n  var outputElement = useRef(null);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(\"textarea\", {\n    style: Object.assign({\n      margin: '1% 2%'\n    }, splitVertical(0, 40)),\n    onChange: function onChange(e) {\n      setSrc(e.target.value);\n      cacheData('writing', src);\n    },\n    onMouseEnter: function onMouseEnter() {\n      return setMode(Mode.IN);\n    },\n    onTouchStart: function onTouchStart() {\n      return setMode(Mode.IN);\n    },\n    onScroll: function onScroll(e) {\n      if (mode == Mode.IN) {\n        outputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (outputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: inputElement,\n    value: src,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", (_jsx = {\n    style: Object.assign(splitVertical(46, 50), splitHorizontal(45, 55))\n  }, _defineProperty(_jsx, \"style\", center), _defineProperty(_jsx, \"__self\", _this), _defineProperty(_jsx, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }), _jsx), __jsx(SaveButton, {\n    src: src,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), __jsx(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    style: Object.assign({\n      overflow: 'auto',\n      margin: '1% 2%'\n    }, splitVertical(50, 100)),\n    onMouseEnter: function onMouseEnter() {\n      return setMode(Mode.OUT);\n    },\n    onTouchStart: function onTouchStart() {\n      return setMode(Mode.OUT);\n    },\n    onScroll: function onScroll(e) {\n      if (mode == Mode.OUT) {\n        inputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (inputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: outputElement,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(ReactMarkdown, {\n    source: src,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(Writer, \"U+GtwRg3PfFHOZCtuEgsybPnKJ8=\");\n\n_c = Writer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Writer\");","map":{"version":3,"sources":["/home/teraoka/app/note/components/writer.tsx"],"names":["useState","useRef","ReactMarkdown","cacheData","getCache","center","splitVertical","splitHorizontal","windowHeight","BackButton","SaveButton","Mode","Writer","src","setSrc","IN","mode","setMode","inputElement","outputElement","Object","assign","margin","e","target","value","current","scrollTop","currentTarget","scrollHeight","overflow","OUT"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { cacheData, getCache } from '../cache/cache'\nimport { center, splitVertical, splitHorizontal } from '../styles/styles'\nimport { windowHeight, windowWidth } from '../states/windowSize'\nimport { BackButton } from './backButton'\nimport { SaveButton } from './saveButton'\n\nenum Mode {\n  IN,\n  OUT,\n}\n\nexport const Writer = () => {\n  // states\n  const [src, setSrc] = useState(\n    getCache('writing') || '# Markdown Editor\\n\\nwrite a note here'\n  )\n  const [mode, setMode] = useState(Mode.IN)\n\n  // reference to child components\n  const inputElement = useRef(null)\n  const outputElement = useRef(null)\n\n  return (\n    <div>\n      <textarea\n        style={Object.assign({ margin: '1% 2%' }, splitVertical(0, 40))}\n        onChange={(e) => {\n          setSrc(e.target.value)\n          cacheData('writing', src)\n        }}\n        onMouseEnter={() => setMode(Mode.IN)}\n        onTouchStart={() => setMode(Mode.IN)}\n        onScroll={(e) => {\n          if (mode == Mode.IN) {\n            outputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (outputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={inputElement}\n        value={src}\n      ></textarea>\n      <div\n        style={Object.assign(splitVertical(46, 50), splitHorizontal(45, 55))}\n        style={center}\n      >\n        <SaveButton src={src}></SaveButton>\n        <BackButton></BackButton>\n      </div>\n      <div\n        style={Object.assign(\n          { overflow: 'auto', margin: '1% 2%' },\n          splitVertical(50, 100)\n        )}\n        onMouseEnter={() => setMode(Mode.OUT)}\n        onTouchStart={() => setMode(Mode.OUT)}\n        onScroll={(e) => {\n          if (mode == Mode.OUT) {\n            inputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (inputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={outputElement}\n      >\n        <ReactMarkdown source={src}></ReactMarkdown>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}