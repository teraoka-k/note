{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nimport { playLowTone, usesSound } from './soundLibrary';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"write\"] = 0] = \"write\";\n  AppMode[AppMode[\"read\"] = 1] = \"read\";\n  AppMode[AppMode[\"rewrite\"] = 2] = \"rewrite\";\n})(AppMode || (AppMode = {}));\n\nvar mode;\nvar setMode;\nexport function useAppMode() {\n  ;\n\n  var _useState = useState(AppMode.read);\n\n  var _useState2 = _slicedToArray(_useState, 2);\n\n  mode = _useState2[0];\n  setMode = _useState2[1];\n}\nexport function isWriteMode() {\n  return mode == AppMode.write;\n}\nexport function isReadMode() {\n  return mode == AppMode.read;\n}\nexport function isRewriteMode() {\n  return mode == AppMode.rewrite;\n}\nexport function setWriteMode() {\n  cahngeMode(AppMode.write);\n}\nexport function setReadMode() {\n  cahngeMode(AppMode.read);\n}\nexport function setRewriteMode() {\n  cahngeMode(AppMode.rewrite);\n}\n/**\n * @private\n */\n\nfunction cahngeMode(newMode) {\n  if (usesSound) playLowTone();\n  histories.push(mode);\n  setMode(newMode);\n}\n\nexport function backMode() {\n  setMode(histories.pop());\n}\nvar histories = [];","map":null,"metadata":{},"sourceType":"module"}