{"ast":null,"code":"var _jsxFileName = \"/home/teraoka/app/note/components/MdEditor.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { cacheData, getCache } from '../cache/cache';\nimport { center } from '../styles/styles';\nimport { playCloseSound, playEnterSound } from '../util/sounds';\nimport { Note } from '../logic/colllections/note';\nvar Mode;\n\n(function (Mode) {\n  Mode[Mode[\"IN\"] = 0] = \"IN\";\n  Mode[Mode[\"OUT\"] = 1] = \"OUT\";\n})(Mode || (Mode = {}));\n\nexport const MdEditor = props => {\n  // states\n  const {\n    0: height,\n    1: setHeight\n  } = useState(0);\n  const {\n    0: width,\n    1: setWidth\n  } = useState(0);\n  const {\n    0: src,\n    1: setSrc\n  } = useState(getCache('writing') || props.template || '# Markdown Editor\\n\\nwrite a note here');\n  const {\n    0: mode,\n    1: setMode\n  } = useState(Mode.IN); // reference to child components\n\n  const inputElement = useRef(null);\n  const outputElement = useRef(null); // after mount\n  // - auto resize window\n\n  useEffect(() => {\n    const adaptWindowSize = () => {\n      setHeight(window.innerHeight * 0.9 / 2.1);\n      setWidth(window.innerWidth * 0.9 - 20);\n    };\n\n    adaptWindowSize();\n    window.addEventListener('resize', adaptWindowSize);\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"textarea\", {\n    style: {\n      height: `${height}px`,\n      width: `${width}px`\n    },\n    onChange: e => {\n      setSrc(e.target.value);\n      cacheData('writing', src);\n    },\n    onMouseEnter: () => setMode(Mode.IN),\n    onTouchStart: () => setMode(Mode.IN),\n    onScroll: e => {\n      if (mode == Mode.IN) {\n        outputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - height) * (outputElement.current.scrollHeight - height);\n      }\n    },\n    ref: inputElement,\n    value: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: () => {\n      playEnterSound();\n      new Note(src).insert();\n      props.setHomeMode();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: () => {\n      playCloseSound();\n      props.setHomeMode();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Back\")), __jsx(\"div\", {\n    style: {\n      height: `${height}px`,\n      width: `${width}px`,\n      overflow: 'auto'\n    },\n    onMouseEnter: () => setMode(Mode.OUT),\n    onTouchStart: () => setMode(Mode.OUT),\n    onScroll: e => {\n      if (mode == Mode.OUT) {\n        inputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - height) * (inputElement.current.scrollHeight - height);\n      }\n    },\n    ref: outputElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(ReactMarkdown, {\n    source: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["/home/teraoka/app/note/components/MdEditor.tsx"],"names":["useState","useEffect","useRef","ReactMarkdown","cacheData","getCache","center","playCloseSound","playEnterSound","Note","Mode","MdEditor","props","height","setHeight","width","setWidth","src","setSrc","template","mode","setMode","IN","inputElement","outputElement","adaptWindowSize","window","innerHeight","innerWidth","addEventListener","e","target","value","current","scrollTop","currentTarget","scrollHeight","insert","setHomeMode","overflow","OUT"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { cacheData, getCache } from '../cache/cache'\nimport { center } from '../styles/styles'\nimport { playCloseSound, playEnterSound } from '../util/sounds'\nimport { Note } from '../logic/colllections/note'\n\ninterface MdEditorProps {\n  template?: string\n  setHomeMode: () => void\n}\n\nenum Mode {\n  IN,\n  OUT,\n}\n\nexport const MdEditor = (props: MdEditorProps) => {\n  // states\n  const [height, setHeight] = useState(0)\n  const [width, setWidth] = useState(0)\n  const [src, setSrc] = useState(\n    getCache('writing') ||\n      props.template ||\n      '# Markdown Editor\\n\\nwrite a note here'\n  )\n  const [mode, setMode] = useState(Mode.IN)\n\n  // reference to child components\n  const inputElement = useRef(null)\n  const outputElement = useRef(null)\n\n  // after mount\n  // - auto resize window\n  useEffect(() => {\n    const adaptWindowSize = () => {\n      setHeight((window.innerHeight * 0.9) / 2.1)\n      setWidth(window.innerWidth * 0.9 - 20)\n    }\n    adaptWindowSize()\n    window.addEventListener('resize', adaptWindowSize)\n  }, [])\n\n  return (\n    <div>\n      <textarea\n        style={{ height: `${height}px`, width: `${width}px` }}\n        onChange={(e) => {\n          setSrc(e.target.value)\n          cacheData('writing', src)\n        }}\n        onMouseEnter={() => setMode(Mode.IN)}\n        onTouchStart={() => setMode(Mode.IN)}\n        onScroll={(e) => {\n          if (mode == Mode.IN) {\n            outputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - height)) *\n              (outputElement.current.scrollHeight - height)\n          }\n        }}\n        ref={inputElement}\n        value={src}\n      ></textarea>\n      <div style={center}>\n        <button\n          onClick={() => {\n            playEnterSound()\n            new Note(src).insert()\n            props.setHomeMode()\n          }}\n        >\n          Save\n        </button>\n        <button\n          onClick={() => {\n            playCloseSound()\n            props.setHomeMode()\n          }}\n        >\n          Back\n        </button>\n      </div>\n      <div\n        style={{\n          height: `${height}px`,\n          width: `${width}px`,\n          overflow: 'auto',\n        }}\n        onMouseEnter={() => setMode(Mode.OUT)}\n        onTouchStart={() => setMode(Mode.OUT)}\n        onScroll={(e) => {\n          if (mode == Mode.OUT) {\n            inputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - height)) *\n              (inputElement.current.scrollHeight - height)\n          }\n        }}\n        ref={outputElement}\n      >\n        <ReactMarkdown source={src}></ReactMarkdown>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}