{"ast":null,"code":"import { MongoClient } from 'mongodb';\nconst URL = 'mongodb://localhost:27017';\nconst NAME = 'mongodb';\nexport async function insertDocument(collectionName, document) {\n  await crudCollection(collectionName, async collection => await collection.insertOne(document));\n}\nexport async function findDocuments(collectionName, filter) {\n  return await crudCollection(collectionName, async collection => await collection.find(filter).toArray());\n}\nexport async function updateDocument(collectionName, filter, newDocument) {\n  await crudCollection(collectionName, async collection => await collection.updateOne(filter, {\n    $set: newDocument\n  }));\n}\nexport async function deleteDocument(collectionName, filter) {\n  await crudCollection(collectionName, async collection => await collection.deleteOne(filter));\n}\n/**\n * @private\n */\n\nasync function crudCollection(collectionName, method) {\n  let client;\n\n  try {\n    client = await MongoClient.connect(URL, {\n      useNewUrlParser: true\n    });\n    const collection = client.db(NAME).collection(collectionName);\n    return await method(collection);\n  } finally {\n    client.close();\n  }\n}","map":{"version":3,"sources":["/home/teraoka/app/note/logic/mongoAPI.ts"],"names":["MongoClient","URL","NAME","insertDocument","collectionName","document","crudCollection","collection","insertOne","findDocuments","filter","find","toArray","updateDocument","newDocument","updateOne","$set","deleteDocument","deleteOne","method","client","connect","useNewUrlParser","db","close"],"mappings":"AAAA,SAASA,WAAT,QAAwC,SAAxC;AAEA,MAAMC,GAAG,GAAG,2BAAZ;AACA,MAAMC,IAAI,GAAG,SAAb;AAEA,OAAO,eAAeC,cAAf,CAA8BC,cAA9B,EAAsDC,QAAtD,EAAwE;AAC7E,QAAMC,cAAc,CAClBF,cADkB,EAElB,MAAOG,UAAP,IAAsB,MAAMA,UAAU,CAACC,SAAX,CAAqBH,QAArB,CAFV,CAApB;AAID;AAED,OAAO,eAAeI,aAAf,CACLL,cADK,EAELM,MAFK,EAGW;AAChB,SAAO,MAAMJ,cAAc,CACzBF,cADyB,EAEzB,MAAOG,UAAP,IAAsB,MAAMA,UAAU,CAACI,IAAX,CAAgBD,MAAhB,EAAwBE,OAAxB,EAFH,CAA3B;AAID;AAED,OAAO,eAAeC,cAAf,CACLT,cADK,EAELM,MAFK,EAGLI,WAHK,EAIL;AACA,QAAMR,cAAc,CAClBF,cADkB,EAElB,MAAOG,UAAP,IACE,MAAMA,UAAU,CAACQ,SAAX,CAAqBL,MAArB,EAA6B;AAAEM,IAAAA,IAAI,EAAEF;AAAR,GAA7B,CAHU,CAApB;AAKD;AAED,OAAO,eAAeG,cAAf,CAA8Bb,cAA9B,EAAsDM,MAAtD,EAAsE;AAC3E,QAAMJ,cAAc,CAClBF,cADkB,EAElB,MAAOG,UAAP,IAAsB,MAAMA,UAAU,CAACW,SAAX,CAAqBR,MAArB,CAFV,CAApB;AAID;AAED;;;;AAGA,eAAeJ,cAAf,CACEF,cADF,EAEEe,MAFF,EAGE;AACA,MAAIC,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMpB,WAAW,CAACqB,OAAZ,CAAoBpB,GAApB,EAAyB;AAAEqB,MAAAA,eAAe,EAAE;AAAnB,KAAzB,CAAf;AACA,UAAMf,UAAU,GAAGa,MAAM,CAACG,EAAP,CAAUrB,IAAV,EAAgBK,UAAhB,CAA2BH,cAA3B,CAAnB;AACA,WAAO,MAAMe,MAAM,CAACZ,UAAD,CAAnB;AACD,GAJD,SAIU;AACRa,IAAAA,MAAM,CAACI,KAAP;AACD;AACF","sourcesContent":["import { MongoClient, Collection } from 'mongodb'\n\nconst URL = 'mongodb://localhost:27017'\nconst NAME = 'mongodb'\n\nexport async function insertDocument(collectionName: string, document: object) {\n  await crudCollection(\n    collectionName,\n    async (collection) => await collection.insertOne(document)\n  )\n}\n\nexport async function findDocuments(\n  collectionName: string,\n  filter: object\n): Promise<any[]> {\n  return await crudCollection(\n    collectionName,\n    async (collection) => await collection.find(filter).toArray()\n  )\n}\n\nexport async function updateDocument(\n  collectionName: string,\n  filter: object,\n  newDocument: object\n) {\n  await crudCollection(\n    collectionName,\n    async (collection) =>\n      await collection.updateOne(filter, { $set: newDocument })\n  )\n}\n\nexport async function deleteDocument(collectionName: string, filter: object) {\n  await crudCollection(\n    collectionName,\n    async (collection) => await collection.deleteOne(filter)\n  )\n}\n\n/**\n * @private\n */\nasync function crudCollection(\n  collectionName: string,\n  method: (collection: Collection<any>) => Promise<any>\n) {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    const collection = client.db(NAME).collection(collectionName)\n    return await method(collection)\n  } finally {\n    client.close()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}