{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/teraoka/app/note/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MdEditor } from '../components/mdEditor';\nimport { center } from '../styles/styles';\nimport { useState, useEffect } from 'react';\nimport { playOpenSound } from '../util/sounds';\nimport ReadMode from '../components/readMode';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"home\"] = 0] = \"home\";\n  AppMode[AppMode[\"write\"] = 1] = \"write\";\n  AppMode[AppMode[\"read\"] = 2] = \"read\";\n})(AppMode || (AppMode = {}));\n\nexport default _s(function () {\n  _s();\n\n  var _useState = useState(AppMode.home),\n      mode = _useState[0],\n      setMode = _useState[1];\n\n  var _useState2 = useState([]),\n      notes = _useState2[0],\n      setNotes = _useState2[1];\n\n  var _useState3 = useState(0),\n      clickCount = _useState3[0],\n      setClickCount = _useState3[1];\n\n  useEffect(function () {\n    function fetchNotes() {\n      return _fetchNotes.apply(this, arguments);\n    }\n\n    function _fetchNotes() {\n      _fetchNotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('api/notes');\n\n              case 2:\n                res = _context.sent;\n                _context.next = 5;\n                return res.json();\n\n              case 5:\n                data = _context.sent;\n                setNotes(data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchNotes.apply(this, arguments);\n    }\n\n    fetchNotes();\n  }, []);\n  return __jsx(\"div\", {\n    id: \"app\",\n    style: center,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return setClickCount(clickCount + 1);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, clickCount), isHomeMode() ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      playOpenSound();\n      setWriteMode();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Write\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      playOpenSound();\n      setReadMode();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Read\")) : null, isWriteMode() ? __jsx(MdEditor, {\n    clickCount: clickCount,\n    setHomeMode: setHomeMode,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }) : null, isReadMode() ? __jsx(ReadMode, {\n    notes: notes,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 23\n    }\n  }) : null);\n\n  function isHomeMode() {\n    return mode == AppMode.home;\n  }\n\n  function isWriteMode() {\n    return mode == AppMode.write;\n  }\n\n  function isReadMode() {\n    return mode == AppMode.read;\n  }\n\n  function setHomeMode() {\n    setMode(AppMode.home);\n  }\n\n  function setWriteMode() {\n    setMode(AppMode.write);\n  }\n\n  function setReadMode() {\n    setMode(AppMode.read);\n  }\n}, \"6/wwdOXaWGAgCbTT2C5MhUhCp80=\");","map":{"version":3,"sources":["/home/teraoka/app/note/pages/index.tsx"],"names":["MdEditor","center","useState","useEffect","playOpenSound","ReadMode","AppMode","home","mode","setMode","notes","setNotes","clickCount","setClickCount","fetchNotes","fetch","res","json","data","isHomeMode","setWriteMode","setReadMode","isWriteMode","setHomeMode","isReadMode","write","read"],"mappings":"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","sourcesContent":["import { MdEditor } from '../components/mdEditor'\nimport { center } from '../styles/styles'\nimport { useState, useEffect } from 'react'\nimport { playOpenSound } from '../util/sounds'\nimport ReadMode from '../components/readMode'\nimport { Note } from '../logic/colllections/note'\n\nenum AppMode {\n  home,\n  write,\n  read,\n}\n\nexport default () => {\n  const [mode, setMode] = useState(AppMode.home)\n  const [notes, setNotes] = useState([] as Note[])\n  const [clickCount, setClickCount] = useState(0)\n\n  useEffect(() => {\n    async function fetchNotes() {\n      const res = await fetch('api/notes')\n      const data = await res.json()\n      setNotes(data)\n    }\n    fetchNotes()\n  }, [])\n\n  return (\n    <div id=\"app\" style={center}>\n      <button onClick={() => setClickCount(clickCount + 1)}>\n        {clickCount}\n      </button>\n      {isHomeMode() ? (\n        <div>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setWriteMode()\n            }}\n          >\n            Write\n          </button>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setReadMode()\n            }}\n          >\n            Read\n          </button>\n        </div>\n      ) : null}\n      {isWriteMode() ? (\n        <MdEditor clickCount={clickCount} setHomeMode={setHomeMode}></MdEditor>\n      ) : null}\n      {isReadMode() ? <ReadMode notes={notes}></ReadMode> : null}\n    </div>\n  )\n\n  function isHomeMode(): boolean {\n    return mode == AppMode.home\n  }\n  function isWriteMode(): boolean {\n    return mode == AppMode.write\n  }\n  function isReadMode(): boolean {\n    return mode == AppMode.read\n  }\n  function setHomeMode(): void {\n    setMode(AppMode.home)\n  }\n  function setWriteMode(): void {\n    setMode(AppMode.write)\n  }\n  function setReadMode(): void {\n    setMode(AppMode.read)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}