{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/teraoka/app/note/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MdEditor } from '../components/mdEditor';\nimport { center } from '../styles/styles';\nimport { useState } from 'react';\nimport { playOpenSound } from '../util/sounds';\nimport ReadMode from '../components/readMode';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"home\"] = 0] = \"home\";\n  AppMode[AppMode[\"write\"] = 1] = \"write\";\n  AppMode[AppMode[\"read\"] = 2] = \"read\";\n})(AppMode || (AppMode = {}));\n\nexport default /*#__PURE__*/_asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var _useState, mode, setMode, _useState2, notes, setNotes, isHomeMode, isWriteMode, isReadMode, setHomeMode, setWriteMode, setReadMode;\n\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          setReadMode = function _setReadMode() {\n            setMode(AppMode.read);\n          };\n\n          setWriteMode = function _setWriteMode() {\n            setMode(AppMode.write);\n          };\n\n          setHomeMode = function _setHomeMode() {\n            setMode(AppMode.home);\n          };\n\n          isReadMode = function _isReadMode() {\n            return mode == AppMode.read;\n          };\n\n          isWriteMode = function _isWriteMode() {\n            return mode == AppMode.write;\n          };\n\n          isHomeMode = function _isHomeMode() {\n            return mode == AppMode.home;\n          };\n\n          _s();\n\n          _useState = useState(AppMode.home), mode = _useState[0], setMode = _useState[1];\n          _context.t0 = useState;\n          _context.next = 11;\n          return fetch('api/notes');\n\n        case 11:\n          _context.next = 13;\n          return _context.sent.json();\n\n        case 13:\n          _context.t1 = _context.sent;\n          _useState2 = (0, _context.t0)(_context.t1);\n          notes = _useState2[0];\n          setNotes = _useState2[1];\n          return _context.abrupt(\"return\", __jsx(\"div\", {\n            id: \"app\",\n            style: center,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 5\n            }\n          }, isHomeMode() ? __jsx(\"div\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 9\n            }\n          }, __jsx(\"button\", {\n            onClick: function onClick() {\n              playOpenSound();\n              setWriteMode();\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 11\n            }\n          }, \"Write\"), __jsx(\"button\", {\n            onClick: function onClick() {\n              playOpenSound();\n              setReadMode();\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 11\n            }\n          }, \"Read\")) : null, isWriteMode() ? __jsx(MdEditor, {\n            setHomeMode: setHomeMode,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 24\n            }\n          }) : null, isReadMode() ? __jsx(ReadMode, {\n            notes: notes,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 23\n            }\n          }) : null));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}), \"dFrDMmW+b3vg6i5X/hKp1TuoQhQ=\"));","map":{"version":3,"sources":["/home/teraoka/app/note/pages/index.tsx"],"names":["MdEditor","center","useState","playOpenSound","ReadMode","AppMode","isHomeMode","isWriteMode","isReadMode","setHomeMode","setWriteMode","setReadMode","setMode","read","write","home","mode","fetch","json","notes","setNotes"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,wBAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,QAAP,MAAqB,wBAArB;IAGKC,O;;WAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAML,wFAAe;AAAA,6DA+BJC,UA/BI,EAkCJC,WAlCI,EAqCJC,UArCI,EAwCJC,WAxCI,EA2CJC,YA3CI,EA8CJC,WA9CI;;AAAA;AAAA;AAAA;AAAA;AA8CJA,UAAAA,WA9CI,2BA8CgB;AAC3BC,YAAAA,OAAO,CAACP,OAAO,CAACQ,IAAT,CAAP;AACD,WAhDY;;AA2CJH,UAAAA,YA3CI,4BA2CiB;AAC5BE,YAAAA,OAAO,CAACP,OAAO,CAACS,KAAT,CAAP;AACD,WA7CY;;AAwCJL,UAAAA,WAxCI,2BAwCgB;AAC3BG,YAAAA,OAAO,CAACP,OAAO,CAACU,IAAT,CAAP;AACD,WA1CY;;AAqCJP,UAAAA,UArCI,0BAqCkB;AAC7B,mBAAOQ,IAAI,IAAIX,OAAO,CAACQ,IAAvB;AACD,WAvCY;;AAkCJN,UAAAA,WAlCI,2BAkCmB;AAC9B,mBAAOS,IAAI,IAAIX,OAAO,CAACS,KAAvB;AACD,WApCY;;AA+BJR,UAAAA,UA/BI,0BA+BkB;AAC7B,mBAAOU,IAAI,IAAIX,OAAO,CAACU,IAAvB;AACD,WAjCY;;AAAA;;AAAA,sBACWb,QAAQ,CAACG,OAAO,CAACU,IAAT,CADnB,EACNC,IADM,iBACAJ,OADA;AAAA,wBAEaV,QAFb;AAAA;AAAA,iBAEmCe,KAAK,CAAC,WAAD,CAFxC;;AAAA;AAAA;AAAA,+BAEuDC,IAFvD;;AAAA;AAAA;AAAA;AAENC,UAAAA,KAFM;AAECC,UAAAA,QAFD;AAAA,2CAKX;AAAK,YAAA,EAAE,EAAC,KAAR;AAAc,YAAA,KAAK,EAAEnB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGK,UAAU,KACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AACE,YAAA,OAAO,EAAE,mBAAM;AACbH,cAAAA,aAAa;AACbO,cAAAA,YAAY;AACb,aAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EASE;AACE,YAAA,OAAO,EAAE,mBAAM;AACbP,cAAAA,aAAa;AACbQ,cAAAA,WAAW;AACZ,aAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF,CADS,GAmBP,IApBN,EAqBGJ,WAAW,KAAK,MAAC,QAAD;AAAU,YAAA,WAAW,EAAEE,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAL,GAAuD,IArBrE,EAsBGD,UAAU,KAAK,MAAC,QAAD;AAAU,YAAA,KAAK,EAAEW,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAL,GAA2C,IAtBxD,CALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { MdEditor } from '../components/mdEditor'\nimport { center } from '../styles/styles'\nimport { useState } from 'react'\nimport { playOpenSound } from '../util/sounds'\nimport ReadMode from '../components/readMode'\nimport { Note } from '../logic/colllections/note'\n\nenum AppMode {\n  home,\n  write,\n  read,\n}\n\nexport default async () => {\n  const [mode, setMode] = useState(AppMode.home)\n  const [notes, setNotes] = useState(await (await fetch('api/notes')).json())\n\n  return (\n    <div id=\"app\" style={center}>\n      {isHomeMode() ? (\n        <div>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setWriteMode()\n            }}\n          >\n            Write\n          </button>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setReadMode()\n            }}\n          >\n            Read\n          </button>\n        </div>\n      ) : null}\n      {isWriteMode() ? <MdEditor setHomeMode={setHomeMode}></MdEditor> : null}\n      {isReadMode() ? <ReadMode notes={notes}></ReadMode> : null}\n    </div>\n  )\n\n  function isHomeMode(): boolean {\n    return mode == AppMode.home\n  }\n  function isWriteMode(): boolean {\n    return mode == AppMode.write\n  }\n  function isReadMode(): boolean {\n    return mode == AppMode.read\n  }\n  function setHomeMode(): void {\n    setMode(AppMode.home)\n  }\n  function setWriteMode(): void {\n    setMode(AppMode.write)\n  }\n  function setReadMode(): void {\n    setMode(AppMode.read)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}