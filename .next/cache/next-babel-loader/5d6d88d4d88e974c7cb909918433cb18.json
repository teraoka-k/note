{"ast":null,"code":"var _jsxFileName = \"/home/teraoka/app/note/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MdEditor } from '../components/mdEditor';\nimport { center } from '../styles/styles';\nimport { useState } from 'react';\nimport { playOpenSound } from '../util/sounds';\nimport { ReadMode } from '../components/readMode';\nimport { Note } from '../logic/colllections/note';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"home\"] = 0] = \"home\";\n  AppMode[AppMode[\"write\"] = 1] = \"write\";\n  AppMode[AppMode[\"read\"] = 2] = \"read\";\n})(AppMode || (AppMode = {}));\n\nexport default (props => {\n  const {\n    0: mode,\n    1: setMode\n  } = useState(AppMode.home);\n  return __jsx(\"div\", {\n    id: \"app\",\n    style: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, props.nums.map(num => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, num)), isHomeMode() ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    onClick: () => {\n      playOpenSound();\n      setWriteMode();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, \"Write\"), __jsx(\"button\", {\n    onClick: () => {\n      playOpenSound();\n      setReadMode();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"Read\")) : null, isWriteMode() ? __jsx(MdEditor, {\n    setHomeMode: setHomeMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }\n  }) : null, isReadMode() ? __jsx(ReadMode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }\n  }) : null);\n\n  function isHomeMode() {\n    return mode == AppMode.home;\n  }\n\n  function isWriteMode() {\n    return mode == AppMode.write;\n  }\n\n  function isReadMode() {\n    return mode == AppMode.read;\n  }\n\n  function setHomeMode() {\n    setMode(AppMode.home);\n  }\n\n  function setWriteMode() {\n    setMode(AppMode.write);\n  }\n\n  function setReadMode() {\n    setMode(AppMode.read);\n  }\n});\nexport async function getStaticProps() {\n  const notes = await Note.find();\n  return {\n    props: {\n      nums: notes.map(note => note.text)\n    }\n  };\n}","map":{"version":3,"sources":["/home/teraoka/app/note/pages/index.tsx"],"names":["MdEditor","center","useState","playOpenSound","ReadMode","Note","AppMode","props","mode","setMode","home","nums","map","num","isHomeMode","setWriteMode","setReadMode","isWriteMode","setHomeMode","isReadMode","write","read","getStaticProps","notes","find","note","text"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,wBAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,IAAT,QAAqB,4BAArB;IAEKC,O;;WAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAML,gBAAgBC,KAAD,IAAW;AACxB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAACI,OAAO,CAACI,IAAT,CAAhC;AAEA,SACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAc,IAAA,KAAK,EAAET,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,KAAK,CAACI,IAAN,CAAWC,GAAX,CAAgBC,GAAD,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,GAAN,CADD,CADH,EAIGC,UAAU,KACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,OAAO,EAAE,MAAM;AACbX,MAAAA,aAAa;AACbY,MAAAA,YAAY;AACb,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EASE;AACE,IAAA,OAAO,EAAE,MAAM;AACbZ,MAAAA,aAAa;AACba,MAAAA,WAAW;AACZ,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,CADS,GAmBP,IAvBN,EAwBGC,WAAW,KAAK,MAAC,QAAD;AAAU,IAAA,WAAW,EAAEC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,GAAuD,IAxBrE,EAyBGC,UAAU,KAAK,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,GAA6B,IAzB1C,CADF;;AA8BA,WAASL,UAAT,GAA+B;AAC7B,WAAON,IAAI,IAAIF,OAAO,CAACI,IAAvB;AACD;;AACD,WAASO,WAAT,GAAgC;AAC9B,WAAOT,IAAI,IAAIF,OAAO,CAACc,KAAvB;AACD;;AACD,WAASD,UAAT,GAA+B;AAC7B,WAAOX,IAAI,IAAIF,OAAO,CAACe,IAAvB;AACD;;AACD,WAASH,WAAT,GAA6B;AAC3BT,IAAAA,OAAO,CAACH,OAAO,CAACI,IAAT,CAAP;AACD;;AACD,WAASK,YAAT,GAA8B;AAC5BN,IAAAA,OAAO,CAACH,OAAO,CAACc,KAAT,CAAP;AACD;;AACD,WAASJ,WAAT,GAA6B;AAC3BP,IAAAA,OAAO,CAACH,OAAO,CAACe,IAAT,CAAP;AACD;AACF,CAnDD;AAqDA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,KAAK,GAAG,MAAMlB,IAAI,CAACmB,IAAL,EAApB;AACA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAEY,KAAK,CAACX,GAAN,CAAWa,IAAD,IAAUA,IAAI,CAACC,IAAzB;AAAR;AADF,GAAP;AAGD","sourcesContent":["import { MdEditor } from '../components/mdEditor'\nimport { center } from '../styles/styles'\nimport { useState } from 'react'\nimport { playOpenSound } from '../util/sounds'\nimport { ReadMode } from '../components/readMode'\nimport { Note } from '../logic/colllections/note'\n\nenum AppMode {\n  home,\n  write,\n  read,\n}\n\nexport default (props) => {\n  const [mode, setMode] = useState(AppMode.home)\n\n  return (\n    <div id=\"app\" style={center}>\n      {props.nums.map((num) => (\n        <div>{num}</div>\n      ))}\n      {isHomeMode() ? (\n        <div>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setWriteMode()\n            }}\n          >\n            Write\n          </button>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setReadMode()\n            }}\n          >\n            Read\n          </button>\n        </div>\n      ) : null}\n      {isWriteMode() ? <MdEditor setHomeMode={setHomeMode}></MdEditor> : null}\n      {isReadMode() ? <ReadMode></ReadMode> : null}\n    </div>\n  )\n\n  function isHomeMode(): boolean {\n    return mode == AppMode.home\n  }\n  function isWriteMode(): boolean {\n    return mode == AppMode.write\n  }\n  function isReadMode(): boolean {\n    return mode == AppMode.read\n  }\n  function setHomeMode(): void {\n    setMode(AppMode.home)\n  }\n  function setWriteMode(): void {\n    setMode(AppMode.write)\n  }\n  function setReadMode(): void {\n    setMode(AppMode.read)\n  }\n}\n\nexport async function getStaticProps() {\n  const notes = await Note.find()\n  return {\n    props: { nums: notes.map((note) => note.text) },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}