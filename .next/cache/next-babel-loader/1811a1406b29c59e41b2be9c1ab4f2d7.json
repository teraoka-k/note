{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/teraoka/app/note/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MdEditor } from '../components/mdEditor';\nimport { center } from '../styles/styles';\nimport { useState, useEffect } from 'react';\nimport { playOpenSound } from '../util/sounds';\nimport ReadMode from '../components/readMode';\nimport { isHomeMode, setReadMode, isWriteMode, setHomeMode, isReadMode, useAppMode } from '../logic/appMode';\nimport WriteButton from '../components/writeButton';\nexport default _s(function () {\n  _s();\n\n  useAppMode();\n\n  var _useState = useState([]),\n      notes = _useState[0],\n      setNotes = _useState[1];\n\n  useEffect(function () {\n    function fetchNotes() {\n      return _fetchNotes.apply(this, arguments);\n    }\n\n    function _fetchNotes() {\n      _fetchNotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('api/notes');\n\n              case 2:\n                res = _context.sent;\n                _context.next = 5;\n                return res.json();\n\n              case 5:\n                data = _context.sent;\n                setNotes(data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchNotes.apply(this, arguments);\n    }\n\n    fetchNotes();\n  }, []);\n  return __jsx(\"div\", {\n    id: \"app\",\n    style: center,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, isHomeMode() ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(WriteButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      playOpenSound();\n\n      function fetchNotes() {\n        return _fetchNotes2.apply(this, arguments);\n      }\n\n      function _fetchNotes2() {\n        _fetchNotes2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var res, data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return fetch('api/notes');\n\n                case 2:\n                  res = _context2.sent;\n                  _context2.next = 5;\n                  return res.json();\n\n                case 5:\n                  data = _context2.sent;\n                  setNotes(data);\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        return _fetchNotes2.apply(this, arguments);\n      }\n\n      fetchNotes();\n      setReadMode();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Read\")) : null, isWriteMode() ? __jsx(MdEditor, {\n    setHomeMode: setHomeMode,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 24\n    }\n  }) : null, isReadMode() ? __jsx(ReadMode, {\n    notes: notes,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }\n  }) : null);\n}, \"0/yg72FOUuDLw5S+cFQEGWZkJt0=\", false, function () {\n  return [useAppMode];\n});","map":{"version":3,"sources":["/home/teraoka/app/note/pages/index.tsx"],"names":["MdEditor","center","useState","useEffect","playOpenSound","ReadMode","isHomeMode","setReadMode","isWriteMode","setHomeMode","isReadMode","useAppMode","WriteButton","notes","setNotes","fetchNotes","fetch","res","json","data"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,wBAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,SACEC,UADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,UALF,EAMEC,UANF,QAOO,kBAPP;AAQA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,kBAAe,YAAM;AAAA;;AACnBD,EAAAA,UAAU;;AADS,kBAEOT,QAAQ,CAAC,EAAD,CAFf;AAAA,MAEZW,KAFY;AAAA,MAELC,QAFK;;AAInBX,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCY,UADD;AAAA;AAAA;;AAAA;AAAA,6EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBC,KAAK,CAAC,WAAD,CADzB;;AAAA;AACQC,gBAAAA,GADR;AAAA;AAAA,uBAEqBA,GAAG,CAACC,IAAJ,EAFrB;;AAAA;AAEQC,gBAAAA,IAFR;AAGEL,gBAAAA,QAAQ,CAACK,IAAD,CAAR;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAMdJ,IAAAA,UAAU;AACX,GAPQ,EAON,EAPM,CAAT;AASA,SACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAc,IAAA,KAAK,EAAEd,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,UAAU,KACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,OAAO,EAAE,mBAAM;AACbF,MAAAA,aAAa;;AADA,eAEEW,UAFF;AAAA;AAAA;;AAAA;AAAA,gFAEb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACoBC,KAAK,CAAC,WAAD,CADzB;;AAAA;AACQC,kBAAAA,GADR;AAAA;AAAA,yBAEqBA,GAAG,CAACC,IAAJ,EAFrB;;AAAA;AAEQC,kBAAAA,IAFR;AAGEL,kBAAAA,QAAQ,CAACK,IAAD,CAAR;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFa;AAAA;AAAA;;AAObJ,MAAAA,UAAU;AACVR,MAAAA,WAAW;AACZ,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADS,GAkBP,IAnBN,EAoBGC,WAAW,KAAK,MAAC,QAAD;AAAU,IAAA,WAAW,EAAEC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,GAAuD,IApBrE,EAqBGC,UAAU,KAAK,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEG,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,GAA2C,IArBxD,CADF;AAyBD,CAtCD;AAAA,UACEF,UADF;AAAA","sourcesContent":["import { MdEditor } from '../components/mdEditor'\nimport { center } from '../styles/styles'\nimport { useState, useEffect } from 'react'\nimport { playOpenSound } from '../util/sounds'\nimport ReadMode from '../components/readMode'\nimport { Note } from '../logic/colllections/note'\nimport {\n  isHomeMode,\n  setReadMode,\n  isWriteMode,\n  setHomeMode,\n  isReadMode,\n  useAppMode,\n} from '../logic/appMode'\nimport WriteButton from '../components/writeButton'\n\nexport default () => {\n  useAppMode()\n  const [notes, setNotes] = useState([] as Note[])\n\n  useEffect(() => {\n    async function fetchNotes() {\n      const res = await fetch('api/notes')\n      const data = await res.json()\n      setNotes(data)\n    }\n    fetchNotes()\n  }, [])\n\n  return (\n    <div id=\"app\" style={center}>\n      {isHomeMode() ? (\n        <div>\n          <WriteButton></WriteButton>\n          <button\n            onClick={() => {\n              playOpenSound()\n              async function fetchNotes() {\n                const res = await fetch('api/notes')\n                const data = await res.json()\n                setNotes(data)\n              }\n              fetchNotes()\n              setReadMode()\n            }}\n          >\n            Read\n          </button>\n        </div>\n      ) : null}\n      {isWriteMode() ? <MdEditor setHomeMode={setHomeMode}></MdEditor> : null}\n      {isReadMode() ? <ReadMode notes={notes}></ReadMode> : null}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}