{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { findDocuments, insertDocument, deleteDocument } from '../mongoAPI';\nimport { ObjectID } from 'mongodb';\nconst collectionName = 'note';\nexport class Note {\n  constructor(text) {\n    _defineProperty(this, \"_id\", void 0);\n\n    _defineProperty(this, \"text\", void 0);\n\n    this.text = text;\n  }\n\n  async insert() {\n    await insertDocument(collectionName, this);\n  }\n\n  static async find(id) {\n    return await findDocuments(collectionName, id ? {\n      _id: new ObjectID(id)\n    } : {});\n  }\n\n  static async delete(id) {\n    await deleteDocument(collectionName, {\n      _id: new ObjectID(id)\n    });\n  }\n\n  async deletetest() {\n    await deleteDocument(collectionName, {\n      _id: new ObjectID(this._id)\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/teraoka/app/note/logic/colllections/note.ts"],"names":["findDocuments","insertDocument","deleteDocument","ObjectID","collectionName","Note","constructor","text","insert","find","id","_id","delete","deletetest"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,cAAxB,EAAwCC,cAAxC,QAA8D,aAA9D;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,MAAMC,cAAc,GAAG,MAAvB;AAEA,OAAO,MAAMC,IAAN,CAAW;AAIhBC,EAAAA,WAAW,CAACC,IAAD,EAAe;AAAA;;AAAA;;AACxB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAED,QAAMC,MAAN,GAA8B;AAC5B,UAAMP,cAAc,CAACG,cAAD,EAAiB,IAAjB,CAApB;AACD;;AACD,eAAaK,IAAb,CAAkBC,EAAlB,EAAgD;AAC9C,WAAQ,MAAMV,aAAa,CACzBI,cADyB,EAEzBM,EAAE,GAAG;AAAEC,MAAAA,GAAG,EAAE,IAAIR,QAAJ,CAAaO,EAAb;AAAP,KAAH,GAA+B,EAFR,CAA3B;AAID;;AACD,eAAaE,MAAb,CAAoBF,EAApB,EAA+C;AAC7C,UAAMR,cAAc,CAACE,cAAD,EAAiB;AAAEO,MAAAA,GAAG,EAAE,IAAIR,QAAJ,CAAaO,EAAb;AAAP,KAAjB,CAApB;AACD;;AACD,QAAMG,UAAN,GAAkC;AAChC,UAAMX,cAAc,CAACE,cAAD,EAAiB;AAAEO,MAAAA,GAAG,EAAE,IAAIR,QAAJ,CAAa,KAAKQ,GAAlB;AAAP,KAAjB,CAApB;AACD;;AAtBe","sourcesContent":["import { findDocuments, insertDocument, deleteDocument } from '../mongoAPI'\nimport { ObjectID } from 'mongodb'\n\nconst collectionName = 'note'\n\nexport class Note {\n  _id: string\n  text: string\n\n  constructor(text: string) {\n    this.text = text\n  }\n\n  async insert(): Promise<void> {\n    await insertDocument(collectionName, this)\n  }\n  static async find(id?: string): Promise<Note[]> {\n    return (await findDocuments(\n      collectionName,\n      id ? { _id: new ObjectID(id) } : {}\n    )) as Note[]\n  }\n  static async delete(id: string): Promise<void> {\n    await deleteDocument(collectionName, { _id: new ObjectID(id) })\n  }\n  async deletetest(): Promise<void> {\n    await deleteDocument(collectionName, { _id: new ObjectID(this._id) })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}