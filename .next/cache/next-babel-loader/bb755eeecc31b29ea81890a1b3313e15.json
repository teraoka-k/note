{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/teraoka/app/note/components/mdEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { cacheData, getCache } from '../cache/cache';\nimport { center } from '../styles/styles';\nimport { playCloseSound, playEnterSound } from '../util/sounds';\nvar Mode;\n\n(function (Mode) {\n  Mode[Mode[\"IN\"] = 0] = \"IN\";\n  Mode[Mode[\"OUT\"] = 1] = \"OUT\";\n})(Mode || (Mode = {}));\n\nexport var MdEditor = function MdEditor(props) {\n  _s();\n\n  // states\n  var _useState = useState(0),\n      height = _useState[0],\n      setHeight = _useState[1];\n\n  var _useState2 = useState(0),\n      width = _useState2[0],\n      setWidth = _useState2[1];\n\n  var _useState3 = useState(getCache('writing') || props.template || '# Markdown Editor\\n\\nwrite a note here'),\n      src = _useState3[0],\n      setSrc = _useState3[1];\n\n  var _useState4 = useState(Mode.IN),\n      mode = _useState4[0],\n      setMode = _useState4[1]; // reference to child components\n\n\n  var inputElement = useRef(null);\n  var outputElement = useRef(null); // after mount\n  // - auto resize window\n\n  useEffect(function () {\n    var adaptWindowSize = function adaptWindowSize() {\n      setHeight(window.innerHeight * 0.9 / 2.1);\n      setWidth(window.innerWidth * 0.9 - 20);\n    };\n\n    adaptWindowSize();\n    window.addEventListener('resize', adaptWindowSize);\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(\"textarea\", {\n    style: {\n      height: \"\".concat(height, \"px\"),\n      width: \"\".concat(width, \"px\")\n    },\n    onChange: function onChange(e) {\n      setSrc(e.target.value);\n      cacheData('writing', src);\n    },\n    onMouseEnter: function onMouseEnter() {\n      return setMode(Mode.IN);\n    },\n    onTouchStart: function onTouchStart() {\n      return setMode(Mode.IN);\n    },\n    onScroll: function onScroll(e) {\n      if (mode == Mode.IN) {\n        outputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - height) * (outputElement.current.scrollHeight - height);\n      }\n    },\n    ref: inputElement,\n    value: src,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: center,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      playEnterSound();\n      props.setHomeMode();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      playCloseSound();\n      props.setHomeMode();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Back\")), __jsx(\"div\", {\n    style: {\n      height: \"\".concat(height, \"px\"),\n      width: \"\".concat(width, \"px\"),\n      overflow: 'auto'\n    },\n    onMouseEnter: function onMouseEnter() {\n      return setMode(Mode.OUT);\n    },\n    onTouchStart: function onTouchStart() {\n      return setMode(Mode.OUT);\n    },\n    onScroll: function onScroll(e) {\n      if (mode == Mode.OUT) {\n        inputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - height) * (inputElement.current.scrollHeight - height);\n      }\n    },\n    ref: outputElement,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, __jsx(ReactMarkdown, {\n    source: src,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(MdEditor, \"goNU/bPdm2U4DLyhbmmkspWZJbw=\");\n\n_c = MdEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MdEditor\");","map":{"version":3,"sources":["/home/teraoka/app/note/components/mdEditor.tsx"],"names":["useState","useEffect","useRef","ReactMarkdown","cacheData","getCache","center","playCloseSound","playEnterSound","Mode","MdEditor","props","height","setHeight","width","setWidth","template","src","setSrc","IN","mode","setMode","inputElement","outputElement","adaptWindowSize","window","innerHeight","innerWidth","addEventListener","e","target","value","current","scrollTop","currentTarget","scrollHeight","setHomeMode","overflow","OUT"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { cacheData, getCache } from '../cache/cache'\nimport { center } from '../styles/styles'\nimport { playCloseSound, playEnterSound } from '../util/sounds'\n\ninterface MdEditorProps {\n  template?: string\n  setHomeMode: () => void\n}\n\nenum Mode {\n  IN,\n  OUT,\n}\n\nexport const MdEditor = (props: MdEditorProps) => {\n  // states\n  const [height, setHeight] = useState(0)\n  const [width, setWidth] = useState(0)\n  const [src, setSrc] = useState(\n    getCache('writing') ||\n      props.template ||\n      '# Markdown Editor\\n\\nwrite a note here'\n  )\n  const [mode, setMode] = useState(Mode.IN)\n\n  // reference to child components\n  const inputElement = useRef(null)\n  const outputElement = useRef(null)\n\n  // after mount\n  // - auto resize window\n  useEffect(() => {\n    const adaptWindowSize = () => {\n      setHeight((window.innerHeight * 0.9) / 2.1)\n      setWidth(window.innerWidth * 0.9 - 20)\n    }\n    adaptWindowSize()\n    window.addEventListener('resize', adaptWindowSize)\n  }, [])\n\n  return (\n    <div>\n      <textarea\n        style={{ height: `${height}px`, width: `${width}px` }}\n        onChange={(e) => {\n          setSrc(e.target.value)\n          cacheData('writing', src)\n        }}\n        onMouseEnter={() => setMode(Mode.IN)}\n        onTouchStart={() => setMode(Mode.IN)}\n        onScroll={(e) => {\n          if (mode == Mode.IN) {\n            outputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - height)) *\n              (outputElement.current.scrollHeight - height)\n          }\n        }}\n        ref={inputElement}\n        value={src}\n      ></textarea>\n      <div style={center}>\n        <button\n          onClick={() => {\n            playEnterSound()\n            props.setHomeMode()\n          }}\n        >\n          Save\n        </button>\n        <button\n          onClick={() => {\n            playCloseSound()\n            props.setHomeMode()\n          }}\n        >\n          Back\n        </button>\n      </div>\n      <div\n        style={{\n          height: `${height}px`,\n          width: `${width}px`,\n          overflow: 'auto',\n        }}\n        onMouseEnter={() => setMode(Mode.OUT)}\n        onTouchStart={() => setMode(Mode.OUT)}\n        onScroll={(e) => {\n          if (mode == Mode.OUT) {\n            inputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - height)) *\n              (inputElement.current.scrollHeight - height)\n          }\n        }}\n        ref={outputElement}\n      >\n        <ReactMarkdown source={src}></ReactMarkdown>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}