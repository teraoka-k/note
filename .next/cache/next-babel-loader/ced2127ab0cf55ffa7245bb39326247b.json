{"ast":null,"code":"var _jsxFileName = \"/home/teraoka/app/note/components/writer.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { cacheData, getCache } from '../cache/cache';\nimport { center, splitVertical } from '../styles/styles';\nimport { windowHeight } from '../states/windowSize';\nimport { BackButton } from './backButton';\nimport { SaveButton } from './saveButton';\nvar Mode;\n\n(function (Mode) {\n  Mode[Mode[\"IN\"] = 0] = \"IN\";\n  Mode[Mode[\"OUT\"] = 1] = \"OUT\";\n})(Mode || (Mode = {}));\n\nexport const Writer = () => {\n  // states\n  const {\n    0: src,\n    1: setSrc\n  } = useState(getCache('writing') || '# Markdown Editor\\n\\nwrite a note here');\n  const {\n    0: mode,\n    1: setMode\n  } = useState(Mode.IN); // reference to child components\n\n  const inputElement = useRef(null);\n  const outputElement = useRef(null);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(\"textarea\", {\n    style: Object.assign({}, splitVertical(0, 45)),\n    onChange: e => {\n      setSrc(e.target.value);\n      cacheData('writing', src);\n    },\n    onMouseEnter: () => setMode(Mode.IN),\n    onTouchStart: () => setMode(Mode.IN),\n    onScroll: e => {\n      if (mode == Mode.IN) {\n        outputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (outputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: inputElement,\n    value: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(SaveButton, {\n    src: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), __jsx(BackButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    style: Object.assign({// overflow: 'auto',\n    }, splitVertical(52, 100)),\n    onMouseEnter: () => setMode(Mode.OUT),\n    onTouchStart: () => setMode(Mode.OUT),\n    onScroll: e => {\n      if (mode == Mode.OUT) {\n        inputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (inputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: outputElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(ReactMarkdown, {\n    source: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["/home/teraoka/app/note/components/writer.tsx"],"names":["useState","useRef","ReactMarkdown","cacheData","getCache","center","splitVertical","windowHeight","BackButton","SaveButton","Mode","Writer","src","setSrc","mode","setMode","IN","inputElement","outputElement","Object","assign","e","target","value","current","scrollTop","currentTarget","scrollHeight","OUT"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { cacheData, getCache } from '../cache/cache'\nimport { center, splitVertical } from '../styles/styles'\nimport { windowHeight, windowWidth } from '../states/windowSize'\nimport { BackButton } from './backButton'\nimport { SaveButton } from './saveButton'\n\nenum Mode {\n  IN,\n  OUT,\n}\n\nexport const Writer = () => {\n  // states\n  const [src, setSrc] = useState(\n    getCache('writing') || '# Markdown Editor\\n\\nwrite a note here'\n  )\n  const [mode, setMode] = useState(Mode.IN)\n\n  // reference to child components\n  const inputElement = useRef(null)\n  const outputElement = useRef(null)\n\n  return (\n    <div>\n      <textarea\n        style={Object.assign({}, splitVertical(0, 45))}\n        onChange={(e) => {\n          setSrc(e.target.value)\n          cacheData('writing', src)\n        }}\n        onMouseEnter={() => setMode(Mode.IN)}\n        onTouchStart={() => setMode(Mode.IN)}\n        onScroll={(e) => {\n          if (mode == Mode.IN) {\n            outputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (outputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={inputElement}\n        value={src}\n      ></textarea>\n      <div style={center}>\n        <SaveButton src={src}></SaveButton>\n        <BackButton></BackButton>\n      </div>\n      <div\n        style={Object.assign(\n          {\n            // overflow: 'auto',\n          },\n          splitVertical(52, 100)\n        )}\n        onMouseEnter={() => setMode(Mode.OUT)}\n        onTouchStart={() => setMode(Mode.OUT)}\n        onScroll={(e) => {\n          if (mode == Mode.OUT) {\n            inputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (inputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={outputElement}\n      >\n        <ReactMarkdown source={src}></ReactMarkdown>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}