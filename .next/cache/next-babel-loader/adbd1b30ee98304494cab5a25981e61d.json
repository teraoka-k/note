{"ast":null,"code":"var _jsxFileName = \"/home/teraoka/app/note/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MdEditor } from '../components/mdEditor';\nimport { center } from '../styles/styles';\nimport { useState, useEffect } from 'react';\nimport { playOpenSound } from '../util/sounds';\nimport ReadMode from '../components/readMode';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"home\"] = 0] = \"home\";\n  AppMode[AppMode[\"write\"] = 1] = \"write\";\n  AppMode[AppMode[\"read\"] = 2] = \"read\";\n})(AppMode || (AppMode = {}));\n\nexport default (() => {\n  const {\n    0: mode,\n    1: setMode\n  } = useState(AppMode.home);\n  const {\n    0: notes,\n    1: setNotes\n  } = useState([]);\n  const {\n    0: clickCount,\n    1: setClickCount\n  } = useState(0);\n  useEffect(() => {\n    async function fetchNotes() {\n      const res = await fetch('api/notes');\n      const data = await res.json();\n      setNotes(data);\n    }\n\n    fetchNotes();\n  }, []);\n  return __jsx(\"div\", {\n    id: \"app\",\n    style: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    onClick: () => setClickCount(clickCount + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), isHomeMode() ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    onClick: () => {\n      playOpenSound();\n      setWriteMode();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, \"Write\"), __jsx(\"button\", {\n    onClick: () => {\n      playOpenSound();\n      setReadMode();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, \"Read\")) : null, isWriteMode() ? __jsx(MdEditor, {\n    setHomeMode: setHomeMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 24\n    }\n  }) : null, isReadMode() ? __jsx(ReadMode, {\n    notes: notes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }\n  }) : null);\n\n  function isHomeMode() {\n    return mode == AppMode.home;\n  }\n\n  function isWriteMode() {\n    return mode == AppMode.write;\n  }\n\n  function isReadMode() {\n    return mode == AppMode.read;\n  }\n\n  function setHomeMode() {\n    setMode(AppMode.home);\n  }\n\n  function setWriteMode() {\n    setMode(AppMode.write);\n  }\n\n  function setReadMode() {\n    setMode(AppMode.read);\n  }\n});","map":{"version":3,"sources":["/home/teraoka/app/note/pages/index.tsx"],"names":["MdEditor","center","useState","useEffect","playOpenSound","ReadMode","AppMode","mode","setMode","home","notes","setNotes","clickCount","setClickCount","fetchNotes","res","fetch","data","json","isHomeMode","setWriteMode","setReadMode","isWriteMode","setHomeMode","isReadMode","write","read"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,wBAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,QAAP,MAAqB,wBAArB;IAGKC,O;;WAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAML,gBAAe,MAAM;AACnB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAACI,OAAO,CAACG,IAAT,CAAhC;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACU,UAAD;AAAA,OAAaC;AAAb,MAA8BX,QAAQ,CAAC,CAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeW,UAAf,GAA4B;AAC1B,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,WAAD,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAP,MAAAA,QAAQ,CAACM,IAAD,CAAR;AACD;;AACDH,IAAAA,UAAU;AACX,GAPQ,EAON,EAPM,CAAT;AASA,SACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAc,IAAA,KAAK,EAAEb,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAE,MAAMY,aAAa,CAACD,UAAU,GAAG,CAAd,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGO,UAAU,KACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,OAAO,EAAE,MAAM;AACbf,MAAAA,aAAa;AACbgB,MAAAA,YAAY;AACb,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EASE;AACE,IAAA,OAAO,EAAE,MAAM;AACbhB,MAAAA,aAAa;AACbiB,MAAAA,WAAW;AACZ,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,CADS,GAmBP,IArBN,EAsBGC,WAAW,KAAK,MAAC,QAAD;AAAU,IAAA,WAAW,EAAEC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,GAAuD,IAtBrE,EAuBGC,UAAU,KAAK,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEd,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,GAA2C,IAvBxD,CADF;;AA4BA,WAASS,UAAT,GAA+B;AAC7B,WAAOZ,IAAI,IAAID,OAAO,CAACG,IAAvB;AACD;;AACD,WAASa,WAAT,GAAgC;AAC9B,WAAOf,IAAI,IAAID,OAAO,CAACmB,KAAvB;AACD;;AACD,WAASD,UAAT,GAA+B;AAC7B,WAAOjB,IAAI,IAAID,OAAO,CAACoB,IAAvB;AACD;;AACD,WAASH,WAAT,GAA6B;AAC3Bf,IAAAA,OAAO,CAACF,OAAO,CAACG,IAAT,CAAP;AACD;;AACD,WAASW,YAAT,GAA8B;AAC5BZ,IAAAA,OAAO,CAACF,OAAO,CAACmB,KAAT,CAAP;AACD;;AACD,WAASJ,WAAT,GAA6B;AAC3Bb,IAAAA,OAAO,CAACF,OAAO,CAACoB,IAAT,CAAP;AACD;AACF,CA5DD","sourcesContent":["import { MdEditor } from '../components/mdEditor'\nimport { center } from '../styles/styles'\nimport { useState, useEffect } from 'react'\nimport { playOpenSound } from '../util/sounds'\nimport ReadMode from '../components/readMode'\nimport { Note } from '../logic/colllections/note'\n\nenum AppMode {\n  home,\n  write,\n  read,\n}\n\nexport default () => {\n  const [mode, setMode] = useState(AppMode.home)\n  const [notes, setNotes] = useState([] as Note[])\n  const [clickCount, setClickCount] = useState(0)\n\n  useEffect(() => {\n    async function fetchNotes() {\n      const res = await fetch('api/notes')\n      const data = await res.json()\n      setNotes(data)\n    }\n    fetchNotes()\n  }, [])\n\n  return (\n    <div id=\"app\" style={center}>\n      <button onClick={() => setClickCount(clickCount + 1)}></button>\n      {isHomeMode() ? (\n        <div>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setWriteMode()\n            }}\n          >\n            Write\n          </button>\n          <button\n            onClick={() => {\n              playOpenSound()\n              setReadMode()\n            }}\n          >\n            Read\n          </button>\n        </div>\n      ) : null}\n      {isWriteMode() ? <MdEditor setHomeMode={setHomeMode}></MdEditor> : null}\n      {isReadMode() ? <ReadMode notes={notes}></ReadMode> : null}\n    </div>\n  )\n\n  function isHomeMode(): boolean {\n    return mode == AppMode.home\n  }\n  function isWriteMode(): boolean {\n    return mode == AppMode.write\n  }\n  function isReadMode(): boolean {\n    return mode == AppMode.read\n  }\n  function setHomeMode(): void {\n    setMode(AppMode.home)\n  }\n  function setWriteMode(): void {\n    setMode(AppMode.write)\n  }\n  function setReadMode(): void {\n    setMode(AppMode.read)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}