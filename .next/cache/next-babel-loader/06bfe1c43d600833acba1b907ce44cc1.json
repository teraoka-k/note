{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from 'react';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"write\"] = 0] = \"write\";\n  AppMode[AppMode[\"read\"] = 1] = \"read\";\n  AppMode[AppMode[\"rewrite\"] = 2] = \"rewrite\";\n})(AppMode || (AppMode = {}));\n\nvar mode;\nvar setMode;\nexport function useAppMode() {\n  _s();\n\n  ;\n\n  var _useState = useState(AppMode.read);\n\n  var _useState2 = _slicedToArray(_useState, 2);\n\n  mode = _useState2[0];\n  setMode = _useState2[1];\n}\n\n_s(useAppMode, \"gVWnvW+IV07ZlBeaqdaRWBkpTbw=\");\n\nexport function isWriteMode() {\n  return mode == AppMode.write;\n}\nexport function isReadMode() {\n  return mode == AppMode.read;\n}\nexport function isRewriteMode() {\n  return mode == AppMode.rewrite;\n}\nexport function setWriteMode() {\n  cahngeMode(AppMode.write);\n}\nexport function setReadMode() {\n  cahngeMode(AppMode.read);\n}\nexport function setRewriteMode() {\n  cahngeMode(AppMode.rewrite);\n}\n/**\n * @private\n */\n\nfunction cahngeMode(newMode) {\n  histories.push(mode);\n  setMode(newMode);\n}\n\nexport function backMode() {\n  setMode(histories.pop());\n}\nvar histories = [];","map":{"version":3,"sources":["/home/teraoka/app/note/states/appMode.ts"],"names":["useState","AppMode","mode","setMode","useAppMode","read","isWriteMode","write","isReadMode","isRewriteMode","rewrite","setWriteMode","cahngeMode","setReadMode","setRewriteMode","newMode","histories","push","backMode","pop"],"mappings":";;;;AAAA,SAASA,QAAT,QAAmD,OAAnD;IAGKC,O;;WAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAML,IAAIC,IAAJ;AACA,IAAIC,OAAJ;AAEA,OAAO,SAASC,UAAT,GAAsB;AAAA;;AAC3B;;AAD2B,kBACRJ,QAAQ,CAACC,OAAO,CAACI,IAAT,CADA;;AAAA;;AACzBH,EAAAA,IADyB;AACnBC,EAAAA,OADmB;AAE5B;;GAFeC,U;;AAIhB,OAAO,SAASE,WAAT,GAAgC;AACrC,SAAOJ,IAAI,IAAID,OAAO,CAACM,KAAvB;AACD;AACD,OAAO,SAASC,UAAT,GAA+B;AACpC,SAAON,IAAI,IAAID,OAAO,CAACI,IAAvB;AACD;AACD,OAAO,SAASI,aAAT,GAAkC;AACvC,SAAOP,IAAI,IAAID,OAAO,CAACS,OAAvB;AACD;AACD,OAAO,SAASC,YAAT,GAA8B;AACnCC,EAAAA,UAAU,CAACX,OAAO,CAACM,KAAT,CAAV;AACD;AACD,OAAO,SAASM,WAAT,GAA6B;AAClCD,EAAAA,UAAU,CAACX,OAAO,CAACI,IAAT,CAAV;AACD;AACD,OAAO,SAASS,cAAT,GAAgC;AACrCF,EAAAA,UAAU,CAACX,OAAO,CAACS,OAAT,CAAV;AACD;AAED;;;;AAGA,SAASE,UAAT,CAAoBG,OAApB,EAA4C;AAC1CC,EAAAA,SAAS,CAACC,IAAV,CAAef,IAAf;AACAC,EAAAA,OAAO,CAACY,OAAD,CAAP;AACD;;AAED,OAAO,SAASG,QAAT,GAA0B;AAC/Bf,EAAAA,OAAO,CAACa,SAAS,CAACG,GAAV,EAAD,CAAP;AACD;AAED,IAAIH,SAAoB,GAAG,EAA3B","sourcesContent":["import { useState, Dispatch, SetStateAction } from 'react'\nimport { read } from 'fs'\n\nenum AppMode {\n  write,\n  read,\n  rewrite,\n}\n\nlet mode: AppMode\nlet setMode: Dispatch<SetStateAction<AppMode>>\n\nexport function useAppMode() {\n  ;[mode, setMode] = useState(AppMode.read)\n}\n\nexport function isWriteMode(): boolean {\n  return mode == AppMode.write\n}\nexport function isReadMode(): boolean {\n  return mode == AppMode.read\n}\nexport function isRewriteMode(): boolean {\n  return mode == AppMode.rewrite\n}\nexport function setWriteMode(): void {\n  cahngeMode(AppMode.write)\n}\nexport function setReadMode(): void {\n  cahngeMode(AppMode.read)\n}\nexport function setRewriteMode(): void {\n  cahngeMode(AppMode.rewrite)\n}\n\n/**\n * @private\n */\nfunction cahngeMode(newMode: AppMode): void {\n  histories.push(mode)\n  setMode(newMode)\n}\n\nexport function backMode(): void {\n  setMode(histories.pop())\n}\n\nlet histories: AppMode[] = []\n"]},"metadata":{},"sourceType":"module"}