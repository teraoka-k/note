{"ast":null,"code":"var _jsxFileName = \"/home/teraoka/app/note/components/writer.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { cacheData, getCache } from '../cache/cache';\nimport { splitVertical, buttons, splitHorizontal } from '../styles/styles';\nimport { windowHeight } from '../states/windowSize';\nimport { BackButton } from './backButton';\nimport { SaveButton } from './saveButton';\nimport { isWriteMode } from '../states/appMode';\nimport { viewingNote } from '../states/viewingNote';\nvar Mode;\n\n(function (Mode) {\n  Mode[Mode[\"IN\"] = 0] = \"IN\";\n  Mode[Mode[\"OUT\"] = 1] = \"OUT\";\n})(Mode || (Mode = {}));\n\nexport const Writer = () => {\n  // states\n  const {\n    0: src,\n    1: setSrc\n  } = useState(isWriteMode() ? getCache('writing') || '# Markdown Editor\\n\\nwrite a note here' : viewingNote.text);\n  const {\n    0: mode,\n    1: setMode\n  } = useState(Mode.IN); // reference to child components\n\n  const inputElement = useRef(null);\n  const outputElement = useRef(null);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    style: buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(SaveButton, {\n    src: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(BackButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })), __jsx(\"textarea\", {\n    style: Object.assign({\n      margin: '1% 2%'\n    }, Object.assign(splitVertical(5, 8), splitHorizontal(0, 45))),\n    onChange: e => {\n      setSrc(e.target.value);\n      cacheData('writing', src);\n    },\n    onMouseEnter: () => setMode(Mode.IN),\n    onTouchStart: () => setMode(Mode.IN),\n    onScroll: e => {\n      if (mode == Mode.IN) {\n        outputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (outputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: inputElement,\n    value: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: Object.assign({\n      overflow: 'auto',\n      margin: '1% 2%'\n    }, Object.assign(splitVertical(5, 80), splitHorizontal(50, 100))),\n    onMouseEnter: () => setMode(Mode.OUT),\n    onTouchStart: () => setMode(Mode.OUT),\n    onScroll: e => {\n      if (mode == Mode.OUT) {\n        inputElement.current.scrollTop = e.currentTarget.scrollTop / (e.currentTarget.scrollHeight - windowHeight) * (inputElement.current.scrollHeight - windowHeight);\n      }\n    },\n    ref: outputElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(ReactMarkdown, {\n    source: src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["/home/teraoka/app/note/components/writer.tsx"],"names":["useState","useRef","ReactMarkdown","cacheData","getCache","splitVertical","buttons","splitHorizontal","windowHeight","BackButton","SaveButton","isWriteMode","viewingNote","Mode","Writer","src","setSrc","text","mode","setMode","IN","inputElement","outputElement","Object","assign","margin","e","target","value","current","scrollTop","currentTarget","scrollHeight","overflow","OUT"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { cacheData, getCache } from '../cache/cache'\nimport { splitVertical, buttons, splitHorizontal } from '../styles/styles'\nimport { windowHeight } from '../states/windowSize'\nimport { BackButton } from './backButton'\nimport { SaveButton } from './saveButton'\nimport { isWriteMode } from '../states/appMode'\nimport { viewingNote } from '../states/viewingNote'\n\nenum Mode {\n  IN,\n  OUT,\n}\n\nexport const Writer = () => {\n  // states\n  const [src, setSrc] = useState(\n    isWriteMode()\n      ? getCache('writing') || '# Markdown Editor\\n\\nwrite a note here'\n      : viewingNote.text\n  )\n  const [mode, setMode] = useState(Mode.IN)\n\n  // reference to child components\n  const inputElement = useRef(null)\n  const outputElement = useRef(null)\n\n  return (\n    <div>\n      <div style={buttons}>\n        <SaveButton src={src}></SaveButton>\n        <BackButton></BackButton>\n      </div>\n      <textarea\n        style={Object.assign(\n          { margin: '1% 2%' },\n          Object.assign(splitVertical(5, 8), splitHorizontal(0, 45))\n        )}\n        onChange={(e) => {\n          setSrc(e.target.value)\n          cacheData('writing', src)\n        }}\n        onMouseEnter={() => setMode(Mode.IN)}\n        onTouchStart={() => setMode(Mode.IN)}\n        onScroll={(e) => {\n          if (mode == Mode.IN) {\n            outputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (outputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={inputElement}\n        value={src}\n      ></textarea>\n      <div\n        style={Object.assign(\n          { overflow: 'auto', margin: '1% 2%' },\n          Object.assign(splitVertical(5, 80), splitHorizontal(50, 100))\n        )}\n        onMouseEnter={() => setMode(Mode.OUT)}\n        onTouchStart={() => setMode(Mode.OUT)}\n        onScroll={(e) => {\n          if (mode == Mode.OUT) {\n            inputElement.current.scrollTop =\n              (e.currentTarget.scrollTop /\n                (e.currentTarget.scrollHeight - windowHeight)) *\n              (inputElement.current.scrollHeight - windowHeight)\n          }\n        }}\n        ref={outputElement}\n      >\n        <ReactMarkdown source={src}></ReactMarkdown>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}