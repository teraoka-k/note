{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { executeAsync } from '../logic/async';\nexport var notes;\nexport var setNotes;\nexport function useNotes() {\n  ;\n\n  var _useState = useState([]);\n\n  var _useState2 = _slicedToArray(_useState, 2);\n\n  notes = _useState2[0];\n  setNotes = _useState2[1];\n  useEffect(loadNotes, []);\n}\n\nfunction findNotes() {\n  return _findNotes.apply(this, arguments);\n}\n\nfunction _findNotes() {\n  _findNotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('api/note');\n\n          case 2:\n            _context2.next = 4;\n            return _context2.sent.json();\n\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _findNotes.apply(this, arguments);\n}\n\nfunction loadNotes() {\n  executeAsync( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setNotes;\n            _context.next = 3;\n            return findNotes();\n\n          case 3:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n}\n\nexport function deleteNote(note) {\n  fetch(\"api/note\", {\n    method: 'DELETE',\n    body: JSON.stringify(note._id)\n  });\n  loadNotes();\n}\nexport function addNote(src) {\n  fetch('/api/note', {\n    method: 'post',\n    body: JSON.stringify({\n      text: src\n    })\n  });\n}\nexport function modifyNote(src, id) {\n  fetch('/api/note', {\n    method: 'put',\n    body: JSON.stringify({\n      text: src,\n      id: id\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}