{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MongoClient } from 'mongodb';\nvar URL = 'mongodb://localhost:27017';\nvar NAME = 'mongodb';\nexport function insertDocument(_x, _x2) {\n  return _insertDocument.apply(this, arguments);\n}\n\nfunction _insertDocument() {\n  _insertDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(collectionName, document) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return MongoClient.connect(URL, {\n              useNewUrlParser: true\n            });\n\n          case 3:\n            client = _context.sent;\n            _context.next = 6;\n            return client.db(NAME).collection(collectionName).insertOne(document);\n\n          case 6:\n            _context.prev = 6;\n            client.close();\n            return _context.finish(6);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0,, 6, 9]]);\n  }));\n  return _insertDocument.apply(this, arguments);\n}\n\nexport function findDocuments(_x3, _x4) {\n  return _findDocuments.apply(this, arguments);\n}\n\nfunction _findDocuments() {\n  _findDocuments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collectionName, filter) {\n    var client;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return MongoClient.connect(URL, {\n              useNewUrlParser: true\n            });\n\n          case 3:\n            client = _context2.sent;\n            _context2.next = 6;\n            return client.db(NAME).collection(collectionName).find({}).toArray();\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n            _context2.prev = 7;\n            client.close();\n            return _context2.finish(7);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0,, 7, 10]]);\n  }));\n  return _findDocuments.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/teraoka/app/note/logic/mongoAPI.ts"],"names":["MongoClient","URL","NAME","insertDocument","collectionName","document","connect","useNewUrlParser","client","db","collection","insertOne","close","findDocuments","filter","find","toArray"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,IAAMC,GAAG,GAAG,2BAAZ;AACA,IAAMC,IAAI,GAAG,SAAb;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;6EAAO,iBACLC,cADK,EAELC,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMYL,WAAW,CAACM,OAAZ,CAAoBL,GAApB,EAAyB;AAAEM,cAAAA,eAAe,EAAE;AAAnB,aAAzB,CANZ;;AAAA;AAMHC,YAAAA,MANG;AAAA;AAAA,mBAOGA,MAAM,CAACC,EAAP,CAAUP,IAAV,EAAgBQ,UAAhB,CAA2BN,cAA3B,EAA2CO,SAA3C,CAAqDN,QAArD,CAPH;;AAAA;AAAA;AASHG,YAAAA,MAAM,CAACI,KAAP;AATG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO,kBACLT,cADK,EAELU,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMYd,WAAW,CAACM,OAAZ,CAAoBL,GAApB,EAAyB;AAAEM,cAAAA,eAAe,EAAE;AAAnB,aAAzB,CANZ;;AAAA;AAMHC,YAAAA,MANG;AAAA;AAAA,mBAOUA,MAAM,CAACC,EAAP,CAAUP,IAAV,EAAgBQ,UAAhB,CAA2BN,cAA3B,EAA2CW,IAA3C,CAAgD,EAAhD,EAAoDC,OAApD,EAPV;;AAAA;AAAA;;AAAA;AAAA;AASHR,YAAAA,MAAM,CAACI,KAAP;AATG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { MongoClient } from 'mongodb'\n\nconst URL = 'mongodb://localhost:27017'\nconst NAME = 'mongodb'\n\nexport async function insertDocument(\n  collectionName: string,\n  document: object\n): Promise<void> {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    await client.db(NAME).collection(collectionName).insertOne(document)\n  } finally {\n    client.close()\n  }\n}\n\nexport async function findDocuments(\n  collectionName: string,\n  filter: object\n): Promise<any[]> {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    return await client.db(NAME).collection(collectionName).find({}).toArray()\n  } finally {\n    client.close()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}