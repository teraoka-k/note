{"ast":null,"code":"import { MongoClient } from 'mongodb';\nconst URL = 'mongodb://localhost:27017';\nconst NAME = 'mongodb';\nexport async function insertDocument(collectionName, document) {\n  let client;\n\n  try {\n    client = await MongoClient.connect(URL, {\n      useNewUrlParser: true\n    });\n    await client.db(NAME).collection(collectionName).insertOne(document);\n  } finally {\n    client.close();\n  }\n}\nexport async function findDocuments(collectionName, filter) {\n  let client;\n\n  try {\n    client = await MongoClient.connect(URL, {\n      useNewUrlParser: true\n    });\n    return await client.db(NAME).collection(collectionName).find(filter).toArray();\n  } finally {\n    client.close();\n  }\n}\nexport async function deleteDocument(collectionName, filter) {\n  let client;\n\n  try {\n    client = await MongoClient.connect(URL, {\n      useNewUrlParser: true\n    });\n    return await client.db(NAME).collection(collectionName).deleteOne(filter);\n  } finally {\n    client.close();\n  }\n}\nexport async function updateDocument(collectionName, filter, newDocument) {\n  let client;\n\n  try {\n    client = await MongoClient.connect(URL, {\n      useNewUrlParser: true\n    });\n    return await client.db(NAME).collection(collectionName).updateOne(filter, {\n      $set: newDocument\n    });\n  } finally {\n    client.close();\n  }\n}","map":{"version":3,"sources":["/home/teraoka/app/note/logic/mongoAPI.ts"],"names":["MongoClient","URL","NAME","insertDocument","collectionName","document","client","connect","useNewUrlParser","db","collection","insertOne","close","findDocuments","filter","find","toArray","deleteDocument","deleteOne","updateDocument","newDocument","updateOne","$set"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,MAAMC,GAAG,GAAG,2BAAZ;AACA,MAAMC,IAAI,GAAG,SAAb;AAEA,OAAO,eAAeC,cAAf,CACLC,cADK,EAELC,QAFK,EAGU;AACf,MAAIC,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoBN,GAApB,EAAyB;AAAEO,MAAAA,eAAe,EAAE;AAAnB,KAAzB,CAAf;AACA,UAAMF,MAAM,CAACG,EAAP,CAAUP,IAAV,EAAgBQ,UAAhB,CAA2BN,cAA3B,EAA2CO,SAA3C,CAAqDN,QAArD,CAAN;AACD,GAHD,SAGU;AACRC,IAAAA,MAAM,CAACM,KAAP;AACD;AACF;AAED,OAAO,eAAeC,aAAf,CACLT,cADK,EAELU,MAFK,EAGW;AAChB,MAAIR,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoBN,GAApB,EAAyB;AAAEO,MAAAA,eAAe,EAAE;AAAnB,KAAzB,CAAf;AACA,WAAO,MAAMF,MAAM,CAChBG,EADU,CACPP,IADO,EAEVQ,UAFU,CAECN,cAFD,EAGVW,IAHU,CAGLD,MAHK,EAIVE,OAJU,EAAb;AAKD,GAPD,SAOU;AACRV,IAAAA,MAAM,CAACM,KAAP;AACD;AACF;AAED,OAAO,eAAeK,cAAf,CAA8Bb,cAA9B,EAAsDU,MAAtD,EAAsE;AAC3E,MAAIR,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoBN,GAApB,EAAyB;AAAEO,MAAAA,eAAe,EAAE;AAAnB,KAAzB,CAAf;AACA,WAAO,MAAMF,MAAM,CAACG,EAAP,CAAUP,IAAV,EAAgBQ,UAAhB,CAA2BN,cAA3B,EAA2Cc,SAA3C,CAAqDJ,MAArD,CAAb;AACD,GAHD,SAGU;AACRR,IAAAA,MAAM,CAACM,KAAP;AACD;AACF;AAED,OAAO,eAAeO,cAAf,CACLf,cADK,EAELU,MAFK,EAGLM,WAHK,EAIL;AACA,MAAId,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoBN,GAApB,EAAyB;AAAEO,MAAAA,eAAe,EAAE;AAAnB,KAAzB,CAAf;AACA,WAAO,MAAMF,MAAM,CAChBG,EADU,CACPP,IADO,EAEVQ,UAFU,CAECN,cAFD,EAGViB,SAHU,CAGAP,MAHA,EAGQ;AAAEQ,MAAAA,IAAI,EAAEF;AAAR,KAHR,CAAb;AAID,GAND,SAMU;AACRd,IAAAA,MAAM,CAACM,KAAP;AACD;AACF","sourcesContent":["import { MongoClient } from 'mongodb'\n\nconst URL = 'mongodb://localhost:27017'\nconst NAME = 'mongodb'\n\nexport async function insertDocument(\n  collectionName: string,\n  document: object\n): Promise<void> {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    await client.db(NAME).collection(collectionName).insertOne(document)\n  } finally {\n    client.close()\n  }\n}\n\nexport async function findDocuments(\n  collectionName: string,\n  filter: object\n): Promise<any[]> {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    return await client\n      .db(NAME)\n      .collection(collectionName)\n      .find(filter)\n      .toArray()\n  } finally {\n    client.close()\n  }\n}\n\nexport async function deleteDocument(collectionName: string, filter: object) {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    return await client.db(NAME).collection(collectionName).deleteOne(filter)\n  } finally {\n    client.close()\n  }\n}\n\nexport async function updateDocument(\n  collectionName: string,\n  filter: object,\n  newDocument: object\n) {\n  let client: MongoClient\n  try {\n    client = await MongoClient.connect(URL, { useNewUrlParser: true })\n    return await client\n      .db(NAME)\n      .collection(collectionName)\n      .updateOne(filter, { $set: newDocument })\n  } finally {\n    client.close()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}