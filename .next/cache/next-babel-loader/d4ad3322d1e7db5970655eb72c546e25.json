{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from 'react';\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"home\"] = 0] = \"home\";\n  AppMode[AppMode[\"write\"] = 1] = \"write\";\n  AppMode[AppMode[\"read\"] = 2] = \"read\";\n})(AppMode || (AppMode = {}));\n\nvar mode;\nvar setMode;\nexport function useAppMode() {\n  _s();\n\n  ;\n\n  var _useState = useState(AppMode.home);\n\n  var _useState2 = _slicedToArray(_useState, 2);\n\n  mode = _useState2[0];\n  setMode = _useState2[1];\n}\n\n_s(useAppMode, \"tM8rFD5fzh7II2cccsx7n5rA8l4=\");\n\nexport function isHomeMode() {\n  return mode == AppMode.home;\n}\nexport function isWriteMode() {\n  return mode == AppMode.write;\n}\nexport function isReadMode() {\n  return mode == AppMode.read;\n}\nexport function setHomeMode() {\n  setMode(AppMode.home);\n  histories.push(AppMode.home);\n}\nexport function setWriteMode() {\n  setMode(AppMode.write);\n  histories.push(AppMode.write);\n}\nexport function setReadMode() {\n  setMode(AppMode.read);\n  histories.push(AppMode.read);\n}\nexport function backMode() {\n  setMode(histories.pop());\n}\nvar histories = [];","map":{"version":3,"sources":["/home/teraoka/app/note/states/appMode.ts"],"names":["useState","AppMode","mode","setMode","useAppMode","home","isHomeMode","isWriteMode","write","isReadMode","read","setHomeMode","histories","push","setWriteMode","setReadMode","backMode","pop"],"mappings":";;;;AAAA,SAASA,QAAT,QAAmD,OAAnD;IAGKC,O;;WAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAML,IAAIC,IAAJ;AACA,IAAIC,OAAJ;AAEA,OAAO,SAASC,UAAT,GAAsB;AAAA;;AAC3B;;AAD2B,kBACRJ,QAAQ,CAACC,OAAO,CAACI,IAAT,CADA;;AAAA;;AACzBH,EAAAA,IADyB;AACnBC,EAAAA,OADmB;AAE5B;;GAFeC,U;;AAIhB,OAAO,SAASE,UAAT,GAA+B;AACpC,SAAOJ,IAAI,IAAID,OAAO,CAACI,IAAvB;AACD;AACD,OAAO,SAASE,WAAT,GAAgC;AACrC,SAAOL,IAAI,IAAID,OAAO,CAACO,KAAvB;AACD;AACD,OAAO,SAASC,UAAT,GAA+B;AACpC,SAAOP,IAAI,IAAID,OAAO,CAACS,IAAvB;AACD;AACD,OAAO,SAASC,WAAT,GAA6B;AAClCR,EAAAA,OAAO,CAACF,OAAO,CAACI,IAAT,CAAP;AACAO,EAAAA,SAAS,CAACC,IAAV,CAAeZ,OAAO,CAACI,IAAvB;AACD;AACD,OAAO,SAASS,YAAT,GAA8B;AACnCX,EAAAA,OAAO,CAACF,OAAO,CAACO,KAAT,CAAP;AACAI,EAAAA,SAAS,CAACC,IAAV,CAAeZ,OAAO,CAACO,KAAvB;AACD;AACD,OAAO,SAASO,WAAT,GAA6B;AAClCZ,EAAAA,OAAO,CAACF,OAAO,CAACS,IAAT,CAAP;AACAE,EAAAA,SAAS,CAACC,IAAV,CAAeZ,OAAO,CAACS,IAAvB;AACD;AACD,OAAO,SAASM,QAAT,GAA0B;AAC/Bb,EAAAA,OAAO,CAACS,SAAS,CAACK,GAAV,EAAD,CAAP;AACD;AAED,IAAIL,SAAoB,GAAG,EAA3B","sourcesContent":["import { useState, Dispatch, SetStateAction } from 'react'\nimport { read } from 'fs'\n\nenum AppMode {\n  home,\n  write,\n  read,\n}\n\nlet mode: AppMode\nlet setMode: Dispatch<SetStateAction<AppMode>>\n\nexport function useAppMode() {\n  ;[mode, setMode] = useState(AppMode.home)\n}\n\nexport function isHomeMode(): boolean {\n  return mode == AppMode.home\n}\nexport function isWriteMode(): boolean {\n  return mode == AppMode.write\n}\nexport function isReadMode(): boolean {\n  return mode == AppMode.read\n}\nexport function setHomeMode(): void {\n  setMode(AppMode.home)\n  histories.push(AppMode.home)\n}\nexport function setWriteMode(): void {\n  setMode(AppMode.write)\n  histories.push(AppMode.write)\n}\nexport function setReadMode(): void {\n  setMode(AppMode.read)\n  histories.push(AppMode.read)\n}\nexport function backMode(): void {\n  setMode(histories.pop())\n}\n\nlet histories: AppMode[] = []\n"]},"metadata":{},"sourceType":"module"}