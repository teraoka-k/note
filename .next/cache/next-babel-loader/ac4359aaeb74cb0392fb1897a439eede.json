{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { findDocuments, insertDocument } from '../mongoAPI';\nvar collectionName = 'note';\nexport var Note = /*#__PURE__*/function () {\n  function Note(text) {\n    _classCallCheck(this, Note);\n\n    _defineProperty(this, \"_id\", void 0);\n\n    _defineProperty(this, \"text\", void 0);\n\n    this.text = text;\n  }\n\n  _createClass(Note, [{\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return insertDocument(collectionName, this);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function insert() {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }()\n  }], [{\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return findDocuments(collectionName, id ? {\n                  _id: id\n                } : {});\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function find(_x) {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }()\n  }]);\n\n  return Note;\n}();","map":{"version":3,"sources":["/home/teraoka/app/note/logic/colllections/note.ts"],"names":["findDocuments","insertDocument","collectionName","Note","text","id","_id"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,aAA9C;AAEA,IAAMC,cAAc,GAAG,MAAvB;AAEA,WAAaC,IAAb;AAIE,gBAAYC,IAAZ,EAA0B;AAAA;;AAAA;;AAAA;;AACxB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBASUH,cAAc,CAACC,cAAD,EAAiB,IAAjB,CATxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FAWoBG,EAXpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAYkBL,aAAa,CACzBE,cADyB,EAEzBG,EAAE,GAAG;AAAEC,kBAAAA,GAAG,EAAED;AAAP,iBAAH,GAAiB,EAFM,CAZ/B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import { findDocuments, insertDocument } from '../mongoAPI'\n\nconst collectionName = 'note'\n\nexport class Note {\n  _id: string\n  text: string\n\n  constructor(text: string) {\n    this.text = text\n  }\n\n  async insert(): Promise<void> {\n    await insertDocument(collectionName, this)\n  }\n  static async find(id?: string): Promise<Note[]> {\n    return (await findDocuments(\n      collectionName,\n      id ? { _id: id } : {}\n    )) as Note[]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}