{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { executeAsync } from '../logic/async';\nexport var notes;\nexport var setNotes;\nexport function useNotes() {\n  _s();\n\n  ;\n\n  var _useState = useState([]);\n\n  var _useState2 = _slicedToArray(_useState, 2);\n\n  notes = _useState2[0];\n  setNotes = _useState2[1];\n  executeAsync(loadNotes);\n}\n\n_s(useNotes, \"4bWmwqNpSmwrWYwBxf0uO8LDcFo=\");\n\nfunction findNotes() {\n  return _findNotes.apply(this, arguments);\n}\n\nfunction _findNotes() {\n  _findNotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('api/notes');\n\n          case 2:\n            _context.next = 4;\n            return _context.sent.json();\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _findNotes.apply(this, arguments);\n}\n\nexport function loadNotes() {\n  return _loadNotes.apply(this, arguments);\n}\n\nfunction _loadNotes() {\n  _loadNotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = setNotes;\n            _context2.next = 3;\n            return findNotes();\n\n          case 3:\n            _context2.t1 = _context2.sent;\n            (0, _context2.t0)(_context2.t1);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadNotes.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/teraoka/app/note/states/notes.ts"],"names":["useState","executeAsync","notes","setNotes","useNotes","loadNotes","findNotes","fetch","json"],"mappings":";;;;;;AAAA,SAAmBA,QAAnB,QAA8D,OAA9D;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,IAAIC,KAAJ;AACP,OAAO,IAAIC,QAAJ;AAEP,OAAO,SAASC,QAAT,GAAoB;AAAA;;AACzB;;AADyB,kBACJJ,QAAQ,CAAC,EAAD,CADJ;;AAAA;;AACvBE,EAAAA,KADuB;AAChBC,EAAAA,QADgB;AAEzBF,EAAAA,YAAY,CAACI,SAAD,CAAZ;AACD;;GAHeD,Q;;SAKDE,S;;;;;wEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACsBC,KAAK,CAAC,WAAD,CAD3B;;AAAA;AAAA;AAAA,iCAC0CC,IAD1C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIA,gBAAsBH,SAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BACLF,QADK;AAAA;AAAA,mBACUG,SAAS,EADnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { Dispatch, useState, useEffect, SetStateAction } from 'react'\nimport { Note } from '../logic/colllections/note'\nimport { executeAsync } from '../logic/async'\n\nexport let notes: Note[]\nexport let setNotes: Dispatch<SetStateAction<Note[]>>\n\nexport function useNotes() {\n  ;[notes, setNotes] = useState([])\n  executeAsync(loadNotes)\n}\n\nasync function findNotes(): Promise<Note[]> {\n  return await (await fetch('api/notes')).json()\n}\n\nexport async function loadNotes(): Promise<void> {\n  setNotes(await findNotes())\n}\n"]},"metadata":{},"sourceType":"module"}