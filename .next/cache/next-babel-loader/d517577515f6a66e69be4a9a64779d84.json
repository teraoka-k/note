{"ast":null,"code":"var _jsxFileName = \"/home/teraoka/app/note/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { MdEditor } from '../components/mdEditor'\n// import { center } from '../styles/styles'\nimport { useState } from 'react'; // import { playOpenSound } from '../util/sounds'\n// import ReadMode from '../components/readMode'\n// import { Note } from '../logic/colllections/note'\n\nvar AppMode;\n\n(function (AppMode) {\n  AppMode[AppMode[\"home\"] = 0] = \"home\";\n  AppMode[AppMode[\"write\"] = 1] = \"write\";\n  AppMode[AppMode[\"read\"] = 2] = \"read\";\n})(AppMode || (AppMode = {}));\n\nexport default (async () => {\n  const {\n    0: mode,\n    1: setMode\n  } = useState(AppMode.home); // const [notes, setNotes] = useState(await (await fetch('api/notes')).json())\n  // console.log(notes)\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, \"test\") // <div id=\"app\" style={center}>\n  //   {isHomeMode() ? (\n  //     <div>\n  //       <button\n  //         onClick={() => {\n  //           playOpenSound()\n  //           setWriteMode()\n  //         }}\n  //       >\n  //         Write\n  //       </button>\n  //       <button\n  //         onClick={() => {\n  //           playOpenSound()\n  //           setReadMode()\n  //         }}\n  //       >\n  //         Read\n  //       </button>\n  //     </div>\n  //   ) : null}\n  //   {isWriteMode() ? <MdEditor setHomeMode={setHomeMode}></MdEditor> : null}\n  //   {isReadMode() ? <ReadMode notes={['test', 'tewst']}></ReadMode> : null}\n  // </div>\n  ;\n\n  function isHomeMode() {\n    return mode == AppMode.home;\n  }\n\n  function isWriteMode() {\n    return mode == AppMode.write;\n  }\n\n  function isReadMode() {\n    return mode == AppMode.read;\n  }\n\n  function setHomeMode() {\n    setMode(AppMode.home);\n  }\n\n  function setWriteMode() {\n    setMode(AppMode.write);\n  }\n\n  function setReadMode() {\n    setMode(AppMode.read);\n  }\n});","map":{"version":3,"sources":["/home/teraoka/app/note/pages/index.tsx"],"names":["useState","AppMode","mode","setMode","home","isHomeMode","isWriteMode","write","isReadMode","read","setHomeMode","setWriteMode","setReadMode"],"mappings":";;;AAAA;AACA;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;AACA;AACA;;IAEKC,O;;WAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAML,gBAAe,YAAY;AACzB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBH,QAAQ,CAACC,OAAO,CAACG,IAAT,CAAhC,CADyB,CAEzB;AACA;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBF;;AA4BA,WAASC,UAAT,GAA+B;AAC7B,WAAOH,IAAI,IAAID,OAAO,CAACG,IAAvB;AACD;;AACD,WAASE,WAAT,GAAgC;AAC9B,WAAOJ,IAAI,IAAID,OAAO,CAACM,KAAvB;AACD;;AACD,WAASC,UAAT,GAA+B;AAC7B,WAAON,IAAI,IAAID,OAAO,CAACQ,IAAvB;AACD;;AACD,WAASC,WAAT,GAA6B;AAC3BP,IAAAA,OAAO,CAACF,OAAO,CAACG,IAAT,CAAP;AACD;;AACD,WAASO,YAAT,GAA8B;AAC5BR,IAAAA,OAAO,CAACF,OAAO,CAACM,KAAT,CAAP;AACD;;AACD,WAASK,WAAT,GAA6B;AAC3BT,IAAAA,OAAO,CAACF,OAAO,CAACQ,IAAT,CAAP;AACD;AACF,CAnDD","sourcesContent":["// import { MdEditor } from '../components/mdEditor'\n// import { center } from '../styles/styles'\nimport { useState } from 'react'\n// import { playOpenSound } from '../util/sounds'\n// import ReadMode from '../components/readMode'\n// import { Note } from '../logic/colllections/note'\n\nenum AppMode {\n  home,\n  write,\n  read,\n}\n\nexport default async () => {\n  const [mode, setMode] = useState(AppMode.home)\n  // const [notes, setNotes] = useState(await (await fetch('api/notes')).json())\n  // console.log(notes)\n\n  return (\n    <div>test</div>\n    // <div id=\"app\" style={center}>\n    //   {isHomeMode() ? (\n    //     <div>\n    //       <button\n    //         onClick={() => {\n    //           playOpenSound()\n    //           setWriteMode()\n    //         }}\n    //       >\n    //         Write\n    //       </button>\n    //       <button\n    //         onClick={() => {\n    //           playOpenSound()\n    //           setReadMode()\n    //         }}\n    //       >\n    //         Read\n    //       </button>\n    //     </div>\n    //   ) : null}\n    //   {isWriteMode() ? <MdEditor setHomeMode={setHomeMode}></MdEditor> : null}\n    //   {isReadMode() ? <ReadMode notes={['test', 'tewst']}></ReadMode> : null}\n    // </div>\n  )\n\n  function isHomeMode(): boolean {\n    return mode == AppMode.home\n  }\n  function isWriteMode(): boolean {\n    return mode == AppMode.write\n  }\n  function isReadMode(): boolean {\n    return mode == AppMode.read\n  }\n  function setHomeMode(): void {\n    setMode(AppMode.home)\n  }\n  function setWriteMode(): void {\n    setMode(AppMode.write)\n  }\n  function setReadMode(): void {\n    setMode(AppMode.read)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}