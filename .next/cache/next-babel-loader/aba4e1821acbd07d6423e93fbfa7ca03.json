{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport var windowHeight;\nexport var setWindowHeight;\nexport var windowWidth;\nexport var setWindowWidth;\nexport function useWindowSize() {\n  _s();\n\n  ;\n\n  var _useState = useState(0);\n\n  var _useState2 = _slicedToArray(_useState, 2);\n\n  windowHeight = _useState2[0];\n  setWindowHeight = _useState2[1];\n\n  var _useState3 = useState(0);\n\n  var _useState4 = _slicedToArray(_useState3, 2);\n\n  windowWidth = _useState4[0];\n  setWindowWidth = _useState4[1];\n  useEffect(function () {\n    var adaptWindowSize = function adaptWindowSize() {\n      setWindowHeight(window.innerHeight * 0.9 / 2.1);\n      setWindowWidth(window.innerWidth * 0.9 - 20);\n    };\n\n    adaptWindowSize();\n    window.addEventListener('resize', adaptWindowSize);\n  });\n}\n\n_s(useWindowSize, \"OXS62ODG4RQsK7Ahu3eBIqyuJeo=\");","map":{"version":3,"sources":["/home/teraoka/app/note/states/windowSize.ts"],"names":["useState","useEffect","windowHeight","setWindowHeight","windowWidth","setWindowWidth","useWindowSize","adaptWindowSize","window","innerHeight","innerWidth","addEventListener"],"mappings":";;;;AAAA,SAASA,QAAT,EAA6CC,SAA7C,QAA8D,OAA9D;AAEA,OAAO,IAAIC,YAAJ;AACP,OAAO,IAAIC,eAAJ;AACP,OAAO,IAAIC,WAAJ;AACP,OAAO,IAAIC,cAAJ;AAEP,OAAO,SAASC,aAAT,GAAyB;AAAA;;AAC9B;;AAD8B,kBACKN,QAAQ,CAAC,CAAD,CADb;;AAAA;;AAC5BE,EAAAA,YAD4B;AACdC,EAAAA,eADc;;AAAA,mBAEGH,QAAQ,CAAC,CAAD,CAFX;;AAAA;;AAE5BI,EAAAA,WAF4B;AAEfC,EAAAA,cAFe;AAG9BJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMM,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BJ,MAAAA,eAAe,CAAEK,MAAM,CAACC,WAAP,GAAqB,GAAtB,GAA6B,GAA9B,CAAf;AACAJ,MAAAA,cAAc,CAACG,MAAM,CAACE,UAAP,GAAoB,GAApB,GAA0B,EAA3B,CAAd;AACD,KAHD;;AAIAH,IAAAA,eAAe;AACfC,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,eAAlC;AACD,GAPQ,CAAT;AAQD;;GAXeD,a","sourcesContent":["import { useState, Dispatch, SetStateAction, useEffect } from 'react'\n\nexport let windowHeight: number\nexport let setWindowHeight: Dispatch<SetStateAction<number>>\nexport let windowWidth: number\nexport let setWindowWidth: Dispatch<SetStateAction<number>>\n\nexport function useWindowSize() {\n  ;[windowHeight, setWindowHeight] = useState(0)\n  ;[windowWidth, setWindowWidth] = useState(0)\n  useEffect(() => {\n    const adaptWindowSize = () => {\n      setWindowHeight((window.innerHeight * 0.9) / 2.1)\n      setWindowWidth(window.innerWidth * 0.9 - 20)\n    }\n    adaptWindowSize()\n    window.addEventListener('resize', adaptWindowSize)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}